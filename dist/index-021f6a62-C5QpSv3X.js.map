{"version":3,"file":"index-021f6a62-C5QpSv3X.js","sources":["../node_modules/@web3-onboard/core/dist/index-021f6a62.js"],"sourcesContent":["import { A as formatUnits, C as etherUnits, B as BaseError, s as size, D as assertSize, b as bytesToHex, a as hexToBigInt, x as trim, E as InvalidBytesBooleanError, h as hexToNumber, G as numberToHex, J as concat, m as isAddress, n as InvalidAddressError, K as padHex, L as boolToHex, M as stringToHex, l as slice, e as hexToBytes, c as createCursor, N as checksumAddress, O as sliceBytes, P as keccak256, j as toBytes, i as isHex, u as concatHex, Q as ChainDoesNotSupportContract, R as prettyPrint, S as getContractAddress, U as formatGwei, V as stringToBytes, W as getUrl, X as ExecutionRevertedError, F as FeeCapTooHighError, Y as FeeCapTooLowError, Z as NonceTooHighError, _ as NonceTooLowError, $ as NonceMaxValueError, a0 as InsufficientFundsError, a1 as IntrinsicGasTooHighError, a2 as IntrinsicGasTooLowError, a3 as TransactionTypeNotSupportedError, T as TipAboveFeeCapError, a4 as UnknownNodeError, a5 as InvalidBytesLengthError, a6 as FeeConflictError, a7 as formatTransactionRequest, a8 as ClientChainNotConfiguredError, k as toHex } from './transactionRequest-be6a8ea9.js';\n\n/**\n * Converts numerical wei to a string representation of ether.\n *\n * - Docs: https://viem.sh/docs/utilities/formatEther\n *\n * @example\n * import { formatEther } from 'viem'\n *\n * formatEther(1000000000000000000n)\n * // '1'\n */\nfunction formatEther(wei, unit = 'wei') {\n    return formatUnits(wei, etherUnits[unit]);\n}\n\n// created 2023-09-12T22:05:14.211Z\n// compressed base64-encoded blob for include-ens data\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\n// see: https://github.com/adraffy/ens-normalize.js#security\n// SHA-256: 0565ed049b9cf1614bb9e11ba7d8ac6a6fb96c893253d890f7e2b2884b9ded32\nvar COMPRESSED$1 = '';\nconst FENCED = new Map([[8217,\"apostrophe\"],[8260,\"fraction slash\"],[12539,\"middle dot\"]]);\nconst NSM_MAX = 4;\n\nfunction decode_arithmetic(bytes) {\r\n\tlet pos = 0;\r\n\tfunction u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\r\n\t\r\n\t// decode the frequency table\r\n\tlet symbol_count = u16();\r\n\tlet total = 1;\r\n\tlet acc = [0, 1]; // first symbol has frequency 1\r\n\tfor (let i = 1; i < symbol_count; i++) {\r\n\t\tacc.push(total += u16());\r\n\t}\r\n\r\n\t// skip the sized-payload that the last 3 symbols index into\r\n\tlet skip = u16();\r\n\tlet pos_payload = pos;\r\n\tpos += skip;\r\n\r\n\tlet read_width = 0;\r\n\tlet read_buffer = 0; \r\n\tfunction read_bit() {\r\n\t\tif (read_width == 0) {\r\n\t\t\t// this will read beyond end of buffer\r\n\t\t\t// but (undefined|0) => zero pad\r\n\t\t\tread_buffer = (read_buffer << 8) | bytes[pos++];\r\n\t\t\tread_width = 8;\r\n\t\t}\r\n\t\treturn (read_buffer >> --read_width) & 1;\r\n\t}\r\n\r\n\tconst N = 31;\r\n\tconst FULL = 2**N;\r\n\tconst HALF = FULL >>> 1;\r\n\tconst QRTR = HALF >> 1;\r\n\tconst MASK = FULL - 1;\r\n\r\n\t// fill register\r\n\tlet register = 0;\r\n\tfor (let i = 0; i < N; i++) register = (register << 1) | read_bit();\r\n\r\n\tlet symbols = [];\r\n\tlet low = 0;\r\n\tlet range = FULL; // treat like a float\r\n\twhile (true) {\r\n\t\tlet value = Math.floor((((register - low + 1) * total) - 1) / range);\r\n\t\tlet start = 0;\r\n\t\tlet end = symbol_count;\r\n\t\twhile (end - start > 1) { // binary search\r\n\t\t\tlet mid = (start + end) >>> 1;\r\n\t\t\tif (value < acc[mid]) {\r\n\t\t\t\tend = mid;\r\n\t\t\t} else {\r\n\t\t\t\tstart = mid;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (start == 0) break; // first symbol is end mark\r\n\t\tsymbols.push(start);\r\n\t\tlet a = low + Math.floor(range * acc[start]   / total);\r\n\t\tlet b = low + Math.floor(range * acc[start+1] / total) - 1;\r\n\t\twhile (((a ^ b) & HALF) == 0) {\r\n\t\t\tregister = (register << 1) & MASK | read_bit();\r\n\t\t\ta = (a << 1) & MASK;\r\n\t\t\tb = (b << 1) & MASK | 1;\r\n\t\t}\r\n\t\twhile (a & ~b & QRTR) {\r\n\t\t\tregister = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\r\n\t\t\ta = (a << 1) ^ HALF;\r\n\t\t\tb = ((b ^ HALF) << 1) | HALF | 1;\r\n\t\t}\r\n\t\tlow = a;\r\n\t\trange = 1 + b - a;\r\n\t}\r\n\tlet offset = symbol_count - 4;\r\n\treturn symbols.map(x => { // index into payload\r\n\t\tswitch (x - offset) {\r\n\t\t\tcase 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\r\n\t\t\tcase 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\r\n\t\t\tcase 1: return offset + bytes[pos_payload++];\r\n\t\t\tdefault: return x - 1;\r\n\t\t}\r\n\t});\r\n}\t\r\n\r\n// returns an iterator which returns the next symbol\r\nfunction read_payload(v) {\r\n\tlet pos = 0;\r\n\treturn () => v[pos++];\r\n}\r\nfunction read_compressed_payload(s) {\r\n\treturn read_payload(decode_arithmetic(unsafe_atob(s)));\r\n}\r\n\r\n// unsafe in the sense:\r\n// expected well-formed Base64 w/o padding \r\n// 20220922: added for https://github.com/adraffy/ens-normalize.js/issues/4\r\nfunction unsafe_atob(s) {\r\n\tlet lookup = [];\r\n\t[...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'].forEach((c, i) => lookup[c.charCodeAt(0)] = i);\r\n\tlet n = s.length;\r\n\tlet ret = new Uint8Array((6 * n) >> 3);\r\n\tfor (let i = 0, pos = 0, width = 0, carry = 0; i < n; i++) {\r\n\t\tcarry = (carry << 6) | lookup[s.charCodeAt(i)];\r\n\t\twidth += 6;\r\n\t\tif (width >= 8) {\r\n\t\t\tret[pos++] = (carry >> (width -= 8));\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\r\nfunction signed(i) { \r\n\treturn (i & 1) ? (~i >> 1) : (i >> 1);\r\n}\r\n\r\nfunction read_deltas(n, next) {\r\n\tlet v = Array(n);\r\n\tfor (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\r\n\treturn v;\r\n}\r\n\r\n// [123][5] => [0 3] [1 1] [0 0]\r\nfunction read_sorted(next, prev = 0) {\r\n\tlet ret = [];\r\n\twhile (true) {\r\n\t\tlet x = next();\r\n\t\tlet n = next();\r\n\t\tif (!n) break;\r\n\t\tprev += x;\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tret.push(prev + i);\r\n\t\t}\r\n\t\tprev += n + 1;\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction read_sorted_arrays(next) {\r\n\treturn read_array_while(() => { \r\n\t\tlet v = read_sorted(next);\r\n\t\tif (v.length) return v;\r\n\t});\r\n}\r\n\r\n// returns map of x => ys\r\nfunction read_mapped(next) {\r\n\tlet ret = [];\r\n\twhile (true) {\r\n\t\tlet w = next();\r\n\t\tif (w == 0) break;\r\n\t\tret.push(read_linear_table(w, next));\r\n\t}\r\n\twhile (true) {\r\n\t\tlet w = next() - 1;\r\n\t\tif (w < 0) break;\r\n\t\tret.push(read_replacement_table(w, next));\r\n\t}\r\n\treturn ret.flat();\r\n}\r\n\r\n// read until next is falsy\r\n// return array of read values\r\nfunction read_array_while(next) {\r\n\tlet v = [];\r\n\twhile (true) {\r\n\t\tlet x = next(v.length);\r\n\t\tif (!x) break;\r\n\t\tv.push(x);\r\n\t}\r\n\treturn v;\r\n}\r\n\r\n// read w columns of length n\r\n// return as n rows of length w\r\nfunction read_transposed(n, w, next) {\r\n\tlet m = Array(n).fill().map(() => []);\r\n\tfor (let i = 0; i < w; i++) {\r\n\t\tread_deltas(n, next).forEach((x, j) => m[j].push(x));\r\n\t}\r\n\treturn m;\r\n}\r\n \r\n// returns [[x, ys], [x+dx, ys+dy], [x+2*dx, ys+2*dy], ...]\r\n// where dx/dy = steps, n = run size, w = length of y\r\nfunction read_linear_table(w, next) {\r\n\tlet dx = 1 + next();\r\n\tlet dy = next();\r\n\tlet vN = read_array_while(next);\r\n\tlet m = read_transposed(vN.length, 1+w, next);\r\n\treturn m.flatMap((v, i) => {\r\n\t\tlet [x, ...ys] = v;\r\n\t\treturn Array(vN[i]).fill().map((_, j) => {\r\n\t\t\tlet j_dy = j * dy;\r\n\t\t\treturn [x + j * dx, ys.map(y => y + j_dy)];\r\n\t\t});\r\n\t});\r\n}\r\n\r\n// return [[x, ys...], ...]\r\n// where w = length of y\r\nfunction read_replacement_table(w, next) { \r\n\tlet n = 1 + next();\r\n\tlet m = read_transposed(n, 1+w, next);\r\n\treturn m.map(v => [v[0], v.slice(1)]);\r\n}\r\n\r\n\r\nfunction read_trie(next) {\r\n\tlet ret = [];\r\n\tlet sorted = read_sorted(next); \r\n\texpand(decode([]), []);\r\n\treturn ret; // not sorted\r\n\tfunction decode(Q) { // characters that lead into this node\r\n\t\tlet S = next(); // state: valid, save, check\r\n\t\tlet B = read_array_while(() => { // buckets leading to new nodes\r\n\t\t\tlet cps = read_sorted(next).map(i => sorted[i]);\r\n\t\t\tif (cps.length) return decode(cps);\r\n\t\t});\r\n\t\treturn {S, B, Q};\r\n\t}\r\n\tfunction expand({S, B}, cps, saved) {\r\n\t\tif (S & 4 && saved === cps[cps.length-1]) return;\r\n\t\tif (S & 2) saved = cps[cps.length-1];\r\n\t\tif (S & 1) ret.push(cps); \r\n\t\tfor (let br of B) {\r\n\t\t\tfor (let cp of br.Q) {\r\n\t\t\t\texpand(br, [...cps, cp], saved);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\n\nfunction hex_cp(cp) {\r\n\treturn cp.toString(16).toUpperCase().padStart(2, '0');\r\n}\r\n\r\nfunction quote_cp(cp) {\r\n\treturn `{${hex_cp(cp)}}`; // raffy convention: like \"\\u{X}\" w/o the \"\\u\"\r\n}\r\n\r\n/*\r\nexport function explode_cp(s) {\r\n\treturn [...s].map(c => c.codePointAt(0));\r\n}\r\n*/\r\nfunction explode_cp(s) { // this is about 2x faster\r\n\tlet cps = [];\r\n\tfor (let pos = 0, len = s.length; pos < len; ) {\r\n\t\tlet cp = s.codePointAt(pos);\r\n\t\tpos += cp < 0x10000 ? 1 : 2;\r\n\t\tcps.push(cp);\r\n\t}\r\n\treturn cps;\r\n}\r\n\r\nfunction str_from_cps(cps) {\r\n\tconst chunk = 4096;\r\n\tlet len = cps.length;\r\n\tif (len < chunk) return String.fromCodePoint(...cps);\r\n\tlet buf = [];\r\n\tfor (let i = 0; i < len; ) {\r\n\t\tbuf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));\r\n\t}\r\n\treturn buf.join('');\r\n}\r\n\r\nfunction compare_arrays(a, b) {\r\n\tlet n = a.length;\r\n\tlet c = n - b.length;\r\n\tfor (let i = 0; c == 0 && i < n; i++) c = a[i] - b[i];\r\n\treturn c;\r\n}\n\n// created 2023-09-12T22:05:14.211Z\n// compressed base64-encoded blob for include-nf data\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\n// see: https://github.com/adraffy/ens-normalize.js#security\n// SHA-256: a974b6f8541fc29d919bc85118af0a44015851fab5343f8679cb31be2bdb209e\nvar COMPRESSED = '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';\n\n// https://unicode.org/reports/tr15/\r\n// for reference implementation\r\n// see: /derive/nf.js\r\n\r\n\r\n// algorithmic hangul\r\n// https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf (page 144)\r\nconst S0 = 0xAC00;\r\nconst L0 = 0x1100;\r\nconst V0 = 0x1161;\r\nconst T0 = 0x11A7;\r\nconst L_COUNT = 19;\r\nconst V_COUNT = 21;\r\nconst T_COUNT = 28;\r\nconst N_COUNT = V_COUNT * T_COUNT;\r\nconst S_COUNT = L_COUNT * N_COUNT;\r\nconst S1 = S0 + S_COUNT;\r\nconst L1 = L0 + L_COUNT;\r\nconst V1 = V0 + V_COUNT;\r\nconst T1 = T0 + T_COUNT;\r\n\r\nfunction unpack_cc(packed) {\r\n\treturn (packed >> 24) & 0xFF;\r\n}\r\nfunction unpack_cp(packed) {\r\n\treturn packed & 0xFFFFFF;\r\n}\r\n\r\nlet SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP;\r\n\r\nfunction init$1() {\r\n\t//console.time('nf');\r\n\tlet r = read_compressed_payload(COMPRESSED);\r\n\tSHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map(x => [x, (i+1) << 24]))); // pre-shifted\r\n\tEXCLUSIONS = new Set(read_sorted(r));\r\n\tDECOMP = new Map();\r\n\tRECOMP = new Map();\r\n\tfor (let [cp, cps] of read_mapped(r)) {\r\n\t\tif (!EXCLUSIONS.has(cp) && cps.length == 2) {\r\n\t\t\tlet [a, b] = cps;\r\n\t\t\tlet bucket = RECOMP.get(a);\r\n\t\t\tif (!bucket) {\r\n\t\t\t\tbucket = new Map();\r\n\t\t\t\tRECOMP.set(a, bucket);\r\n\t\t\t}\r\n\t\t\tbucket.set(b, cp);\r\n\t\t}\r\n\t\tDECOMP.set(cp, cps.reverse()); // stored reversed\r\n\t}\r\n\t//console.timeEnd('nf');\r\n\t// 20230905: 11ms\r\n}\r\n\r\nfunction is_hangul(cp) {\r\n\treturn cp >= S0 && cp < S1;\r\n}\r\n\r\nfunction compose_pair(a, b) {\r\n\tif (a >= L0 && a < L1 && b >= V0 && b < V1) {\r\n\t\treturn S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;\r\n\t} else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {\r\n\t\treturn a + (b - T0);\r\n\t} else {\r\n\t\tlet recomp = RECOMP.get(a);\r\n\t\tif (recomp) {\r\n\t\t\trecomp = recomp.get(b);\r\n\t\t\tif (recomp) {\r\n\t\t\t\treturn recomp;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n}\r\n\r\nfunction decomposed(cps) {\r\n\tif (!SHIFTED_RANK) init$1();\r\n\tlet ret = [];\r\n\tlet buf = [];\r\n\tlet check_order = false;\r\n\tfunction add(cp) {\r\n\t\tlet cc = SHIFTED_RANK.get(cp);\r\n\t\tif (cc) {\r\n\t\t\tcheck_order = true;\r\n\t\t\tcp |= cc;\r\n\t\t}\r\n\t\tret.push(cp);\r\n\t}\r\n\tfor (let cp of cps) {\r\n\t\twhile (true) {\r\n\t\t\tif (cp < 0x80) {\r\n\t\t\t\tret.push(cp);\r\n\t\t\t} else if (is_hangul(cp)) {\r\n\t\t\t\tlet s_index = cp - S0;\r\n\t\t\t\tlet l_index = s_index / N_COUNT | 0;\r\n\t\t\t\tlet v_index = (s_index % N_COUNT) / T_COUNT | 0;\r\n\t\t\t\tlet t_index = s_index % T_COUNT;\r\n\t\t\t\tadd(L0 + l_index);\r\n\t\t\t\tadd(V0 + v_index);\r\n\t\t\t\tif (t_index > 0) add(T0 + t_index);\r\n\t\t\t} else {\r\n\t\t\t\tlet mapped = DECOMP.get(cp);\r\n\t\t\t\tif (mapped) {\r\n\t\t\t\t\tbuf.push(...mapped);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tadd(cp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!buf.length) break;\r\n\t\t\tcp = buf.pop();\r\n\t\t}\r\n\t}\r\n\tif (check_order && ret.length > 1) {\r\n\t\tlet prev_cc = unpack_cc(ret[0]);\r\n\t\tfor (let i = 1; i < ret.length; i++) {\r\n\t\t\tlet cc = unpack_cc(ret[i]);\r\n\t\t\tif (cc == 0 || prev_cc <= cc) {\r\n\t\t\t\tprev_cc = cc;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlet j = i-1;\r\n\t\t\twhile (true) {\r\n\t\t\t\tlet tmp = ret[j+1];\r\n\t\t\t\tret[j+1] = ret[j];\r\n\t\t\t\tret[j] = tmp;\r\n\t\t\t\tif (!j) break;\r\n\t\t\t\tprev_cc = unpack_cc(ret[--j]);\r\n\t\t\t\tif (prev_cc <= cc) break;\r\n\t\t\t}\r\n\t\t\tprev_cc = unpack_cc(ret[i]);\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction composed_from_decomposed(v) {\r\n\tlet ret = [];\r\n\tlet stack = [];\r\n\tlet prev_cp = -1;\r\n\tlet prev_cc = 0;\r\n\tfor (let packed of v) {\r\n\t\tlet cc = unpack_cc(packed);\r\n\t\tlet cp = unpack_cp(packed);\r\n\t\tif (prev_cp == -1) {\r\n\t\t\tif (cc == 0) {\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tret.push(cp);\r\n\t\t\t}\r\n\t\t} else if (prev_cc > 0 && prev_cc >= cc) {\r\n\t\t\tif (cc == 0) {\r\n\t\t\t\tret.push(prev_cp, ...stack);\r\n\t\t\t\tstack.length = 0;\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tstack.push(cp);\r\n\t\t\t}\r\n\t\t\tprev_cc = cc;\r\n\t\t} else {\r\n\t\t\tlet composed = compose_pair(prev_cp, cp);\r\n\t\t\tif (composed >= 0) {\r\n\t\t\t\tprev_cp = composed;\r\n\t\t\t} else if (prev_cc == 0 && cc == 0) {\r\n\t\t\t\tret.push(prev_cp);\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tstack.push(cp);\r\n\t\t\t\tprev_cc = cc;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (prev_cp >= 0) {\r\n\t\tret.push(prev_cp, ...stack);\t\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\n// note: cps can be iterable\r\nfunction nfd(cps) {\r\n\treturn decomposed(cps).map(unpack_cp);\r\n}\r\nfunction nfc(cps) {\r\n\treturn composed_from_decomposed(decomposed(cps));\r\n}\n\nconst HYPHEN = 0x2D;\r\nconst STOP_CH = '.';\r\nconst FE0F = 0xFE0F;\r\nconst UNIQUE_PH = 1;\r\n\r\n// 20230913: replace [...v] with Array_from(v) to avoid large spreads\r\nconst Array_from = x => Array.from(x); // Array.from.bind(Array);\r\n\r\nfunction group_has_cp(g, cp) {\r\n\t// 20230913: keep primary and secondary distinct instead of creating valid union\r\n\treturn g.P.has(cp) || g.Q.has(cp);\r\n}\r\n\r\nclass Emoji extends Array {\r\n\tget is_emoji() { return true; } // free tagging system\r\n}\r\n\r\nlet MAPPED, IGNORED, CM, NSM, ESCAPE, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID, EMOJI_LIST, EMOJI_ROOT;\r\n\r\nfunction init() {\r\n\tif (MAPPED) return;\r\n\t\r\n\tlet r = read_compressed_payload(COMPRESSED$1);\r\n\tconst read_sorted_array = () => read_sorted(r);\r\n\tconst read_sorted_set = () => new Set(read_sorted_array());\r\n\r\n\tMAPPED = new Map(read_mapped(r)); \r\n\tIGNORED = read_sorted_set(); // ignored characters are not valid, so just read raw codepoints\r\n\r\n\t/*\r\n\t// direct include from payload is smaller than the decompression code\r\n\tconst FENCED = new Map(read_array_while(() => {\r\n\t\tlet cp = r();\r\n\t\tif (cp) return [cp, read_str(r())];\r\n\t}));\r\n\t*/\r\n\t// 20230217: we still need all CM for proper error formatting\r\n\t// but norm only needs NSM subset that are potentially-valid\r\n\tCM = read_sorted_array();\r\n\tNSM = new Set(read_sorted_array().map(i => CM[i]));\r\n\tCM = new Set(CM);\r\n\t\r\n\tESCAPE = read_sorted_set(); // characters that should not be printed\r\n\tread_sorted_set(); // only needed to illustrate ens_tokenize() transformations\r\n\r\n\tlet chunks = read_sorted_arrays(r);\r\n\tlet unrestricted = r();\r\n\tconst read_chunked = () => new Set(read_sorted_array().flatMap(i => chunks[i]).concat(read_sorted_array()));\r\n\tGROUPS = read_array_while(i => {\r\n\t\t// minifier property mangling seems unsafe\r\n\t\t// so these are manually renamed to single chars\r\n\t\tlet N = read_array_while(r).map(x => x+0x60);\r\n\t\tif (N.length) {\r\n\t\t\tlet R = i >= unrestricted; // first arent restricted\r\n\t\t\tN[0] -= 32; // capitalize\r\n\t\t\tN = str_from_cps(N);\r\n\t\t\tif (R) N=`Restricted[${N}]`;\r\n\t\t\tlet P = read_chunked(); // primary\r\n\t\t\tlet Q = read_chunked(); // secondary\r\n\t\t\tlet M = !r(); // not-whitelisted, check for NSM\r\n\t\t\t// *** this code currently isn't needed ***\r\n\t\t\t/*\r\n\t\t\tlet V = [...P, ...Q].sort((a, b) => a-b); // derive: sorted valid\r\n\t\t\tlet M = r()-1; // number of combining mark\r\n\t\t\tif (M < 0) { // whitelisted\r\n\t\t\t\tM = new Map(read_array_while(() => {\r\n\t\t\t\t\tlet i = r();\r\n\t\t\t\t\tif (i) return [V[i-1], read_array_while(() => {\r\n\t\t\t\t\t\tlet v = read_array_while(r);\r\n\t\t\t\t\t\tif (v.length) return v.map(x => x-1);\r\n\t\t\t\t\t})];\r\n\t\t\t\t}));\r\n\t\t\t}*/\r\n\t\t\treturn {N, P, Q, M, R};\r\n\t\t}\r\n\t});\r\n\r\n\t// decode compressed wholes\r\n\tWHOLE_VALID = read_sorted_set();\r\n\tWHOLE_MAP = new Map();\r\n\tlet wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b) => a-b); // must be sorted\r\n\twholes.forEach((cp, i) => {\r\n\t\tlet d = r(); \r\n\t\tlet w = wholes[i] = d ? wholes[i-d] : {V: [], M: new Map()};\r\n\t\tw.V.push(cp); // add to member set\r\n\t\tif (!WHOLE_VALID.has(cp)) {\r\n\t\t\tWHOLE_MAP.set(cp, w);  // register with whole map\r\n\t\t}\r\n\t});\r\n\r\n\t// compute confusable-extent complements\r\n\tfor (let {V, M} of new Set(WHOLE_MAP.values())) {\r\n\t\t// connect all groups that have each whole character\r\n\t\tlet recs = [];\r\n\t\tfor (let cp of V) {\r\n\t\t\tlet gs = GROUPS.filter(g => group_has_cp(g, cp));\r\n\t\t\tlet rec = recs.find(({G}) => gs.some(g => G.has(g)));\r\n\t\t\tif (!rec) {\r\n\t\t\t\trec = {G: new Set(), V: []};\r\n\t\t\t\trecs.push(rec);\r\n\t\t\t}\r\n\t\t\trec.V.push(cp);\r\n\t\t\tgs.forEach(g => rec.G.add(g));\r\n\t\t}\r\n\t\t// per character cache groups which are not a member of the extent\r\n\t\tlet union = recs.flatMap(x => Array_from(x.G));\r\n\t\tfor (let {G, V} of recs) {\r\n\t\t\tlet complement = new Set(union.filter(g => !G.has(g)));\r\n\t\t\tfor (let cp of V) {\r\n\t\t\t\tM.set(cp, complement);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// compute valid set\r\n\tlet union = new Set(); // exists in 1+ groups\r\n\tlet multi = new Set(); // exists in 2+ groups\r\n\tconst add_to_union = cp => union.has(cp) ? multi.add(cp) : union.add(cp);\r\n\tfor (let g of GROUPS) {\r\n\t\tfor (let cp of g.P) add_to_union(cp);\r\n\t\tfor (let cp of g.Q) add_to_union(cp);\r\n\t}\r\n\t// dual purpose WHOLE_MAP: return placeholder if unique non-confusable\r\n\tfor (let cp of union) {\r\n\t\tif (!WHOLE_MAP.has(cp) && !multi.has(cp)) {\r\n\t\t\tWHOLE_MAP.set(cp, UNIQUE_PH);\r\n\t\t}\r\n\t}\r\n\tVALID = new Set(Array_from(union).concat(Array_from(nfd(union)))); // possibly valid\r\n\r\n\t// decode emoji\r\n\t// 20230719: emoji are now fully-expanded to avoid quirk logic \r\n\tEMOJI_LIST = read_trie(r).map(v => Emoji.from(v)).sort(compare_arrays);\r\n\tEMOJI_ROOT = new Map(); // this has approx 7K nodes (2+ per emoji)\r\n\tfor (let cps of EMOJI_LIST) {\r\n\t\t// 20230719: change to *slightly* stricter algorithm which disallows \r\n\t\t// insertion of misplaced FE0F in emoji sequences (matching ENSIP-15)\r\n\t\t// example: beautified [A B] (eg. flag emoji) \r\n\t\t//  before: allow: [A FE0F B], error: [A FE0F FE0F B] \r\n\t\t//   after: error: both\r\n\t\t// note: this code now matches ENSNormalize.{cs,java} logic\r\n\t\tlet prev = [EMOJI_ROOT];\r\n\t\tfor (let cp of cps) {\r\n\t\t\tlet next = prev.map(node => {\r\n\t\t\t\tlet child = node.get(cp);\r\n\t\t\t\tif (!child) {\r\n\t\t\t\t\t// should this be object? \r\n\t\t\t\t\t// (most have 1-2 items, few have many)\r\n\t\t\t\t\t// 20230719: no, v8 default map is 4?\r\n\t\t\t\t\tchild = new Map();\r\n\t\t\t\t\tnode.set(cp, child);\r\n\t\t\t\t}\r\n\t\t\t\treturn child;\r\n\t\t\t});\r\n\t\t\tif (cp === FE0F) {\r\n\t\t\t\tprev.push(...next); // less than 20 elements\r\n\t\t\t} else {\r\n\t\t\t\tprev = next;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let x of prev) {\r\n\t\t\tx.V = cps;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// if escaped: {HEX}\r\n//       else: \"x\" {HEX}\r\nfunction quoted_cp(cp) {\r\n\treturn (should_escape(cp) ? '' : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);\r\n}\r\n\r\n// 20230211: some messages can be mixed-directional and result in spillover\r\n// use 200E after a quoted string to force the remainder of a string from \r\n// acquring the direction of the quote\r\n// https://www.w3.org/International/questions/qa-bidi-unicode-controls#exceptions\r\nfunction bidi_qq(s) {\r\n\treturn `\"${s}\"\\u200E`; // strong LTR\r\n}\r\n\r\nfunction check_label_extension(cps) {\r\n\tif (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {\r\n\t\tthrow new Error(`invalid label extension: \"${str_from_cps(cps.slice(0, 4))}\"`);\r\n\t}\r\n}\r\nfunction check_leading_underscore(cps) {\r\n\tconst UNDERSCORE = 0x5F;\r\n\tfor (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {\r\n\t\tif (cps[--i] !== UNDERSCORE) {\r\n\t\t\tthrow new Error('underscore allowed only at start');\r\n\t\t}\r\n\t}\r\n}\r\n// check that a fenced cp is not leading, trailing, or touching another fenced cp\r\nfunction check_fenced(cps) {\r\n\tlet cp = cps[0];\r\n\tlet prev = FENCED.get(cp);\r\n\tif (prev) throw error_placement(`leading ${prev}`);\r\n\tlet n = cps.length;\r\n\tlet last = -1; // prevents trailing from throwing\r\n\tfor (let i = 1; i < n; i++) {\r\n\t\tcp = cps[i];\r\n\t\tlet match = FENCED.get(cp);\r\n\t\tif (match) {\r\n\t\t\t// since cps[0] isn't fenced, cps[1] cannot throw\r\n\t\t\tif (last == i) throw error_placement(`${prev} + ${match}`);\r\n\t\t\tlast = i + 1;\r\n\t\t\tprev = match;\r\n\t\t}\r\n\t}\r\n\tif (last == n) throw error_placement(`trailing ${prev}`);\r\n}\r\n\r\n// create a safe to print string \r\n// invisibles are escaped\r\n// leading cm uses placeholder\r\n// quoter(cp) => string, eg. 3000 => \"{3000}\"\r\n// note: in html, you'd call this function then replace [<>&] with entities\r\nfunction safe_str_from_cps(cps, quoter = quote_cp) {\r\n\t//if (Number.isInteger(cps)) cps = [cps];\r\n\t//if (!Array.isArray(cps)) throw new TypeError(`expected codepoints`);\r\n\tlet buf = [];\r\n\tif (is_combining_mark(cps[0])) buf.push('◌');\r\n\tlet prev = 0;\r\n\tlet n = cps.length;\r\n\tfor (let i = 0; i < n; i++) {\r\n\t\tlet cp = cps[i];\r\n\t\tif (should_escape(cp)) {\r\n\t\t\tbuf.push(str_from_cps(cps.slice(prev, i)));\r\n\t\t\tbuf.push(quoter(cp));\r\n\t\t\tprev = i + 1;\r\n\t\t}\r\n\t}\r\n\tbuf.push(str_from_cps(cps.slice(prev, n)));\r\n\treturn buf.join('');\r\n}\r\n\r\n// note: set(s) cannot be exposed because they can be modified\r\n// note: Object.freeze() doesn't work\r\nfunction is_combining_mark(cp) {\r\n\tinit();\r\n\treturn CM.has(cp);\r\n}\r\nfunction should_escape(cp) {\r\n\tinit();\r\n\treturn ESCAPE.has(cp);\r\n}\r\n\r\nfunction ens_normalize(name) {\r\n\treturn flatten(split(name, nfc, filter_fe0f));\r\n}\r\n\r\nfunction split(name, nf, ef) {\r\n\tif (!name) return []; // 20230719: empty name allowance\r\n\tinit();\r\n\tlet offset = 0;\r\n\t// https://unicode.org/reports/tr46/#Validity_Criteria\r\n\t// 4.) \"The label must not contain a U+002E ( . ) FULL STOP.\"\r\n\treturn name.split(STOP_CH).map(label => {\r\n\t\tlet input = explode_cp(label);\r\n\t\tlet info = {\r\n\t\t\tinput,\r\n\t\t\toffset, // codepoint, not substring!\r\n\t\t};\r\n\t\toffset += input.length + 1; // + stop\r\n\t\ttry {\r\n\t\t\t// 1.) \"The label must be in Unicode Normalization Form NFC\"\r\n\t\t\tlet tokens = info.tokens = tokens_from_str(input, nf, ef);\r\n\t\t\tlet token_count = tokens.length;\r\n\t\t\tlet type;\r\n\t\t\tif (!token_count) { // the label was effectively empty (could of had ignored characters)\r\n\t\t\t\t//norm = [];\r\n\t\t\t\t//type = 'None'; // use this instead of next match, \"ASCII\"\r\n\t\t\t\t// 20230120: change to strict\r\n\t\t\t\t// https://discuss.ens.domains/t/ens-name-normalization-2nd/14564/59\r\n\t\t\t\tthrow new Error(`empty label`);\r\n\t\t\t} \r\n\t\t\tlet norm = info.output = tokens.flat();\r\n\t\t\tcheck_leading_underscore(norm);\r\n\t\t\tlet emoji = info.emoji = token_count > 1 || tokens[0].is_emoji; // same as: tokens.some(x => x.is_emoji);\r\n\t\t\tif (!emoji && norm.every(cp => cp < 0x80)) { // special case for ascii\r\n\t\t\t\t// 20230123: matches matches WHATWG, see note 3.3\r\n\t\t\t\tcheck_label_extension(norm); // only needed for ascii\r\n\t\t\t\t// cant have fenced\r\n\t\t\t\t// cant have cm\r\n\t\t\t\t// cant have wholes\r\n\t\t\t\t// see derive: \"Fastpath ASCII\"\r\n\t\t\t\ttype = 'ASCII';\r\n\t\t\t} else {\r\n\t\t\t\tlet chars = tokens.flatMap(x => x.is_emoji ? [] : x); // all of the nfc tokens concat together\r\n\t\t\t\tif (!chars.length) { // theres no text, just emoji\r\n\t\t\t\t\ttype = 'Emoji';\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 5.) \"The label must not begin with a combining mark, that is: General_Category=Mark.\"\r\n\t\t\t\t\tif (CM.has(norm[0])) throw error_placement('leading combining mark');\r\n\t\t\t\t\tfor (let i = 1; i < token_count; i++) { // we've already checked the first token\r\n\t\t\t\t\t\tlet cps = tokens[i];\r\n\t\t\t\t\t\tif (!cps.is_emoji && CM.has(cps[0])) { // every text token has emoji neighbors, eg. EtEEEtEt...\r\n\t\t\t\t\t\t\t// bidi_qq() not needed since emoji is LTR and cps is a CM\r\n\t\t\t\t\t\t\tthrow error_placement(`emoji + combining mark: \"${str_from_cps(tokens[i-1])} + ${safe_str_from_cps([cps[0]])}\"`); \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcheck_fenced(norm);\r\n\t\t\t\t\tlet unique = Array_from(new Set(chars));\r\n\t\t\t\t\tlet [g] = determine_group(unique); // take the first match\r\n\t\t\t\t\t// see derive: \"Matching Groups have Same CM Style\"\r\n\t\t\t\t\t// alternative: could form a hybrid type: Latin/Japanese/...\t\r\n\t\t\t\t\tcheck_group(g, chars); // need text in order\r\n\t\t\t\t\tcheck_whole(g, unique); // only need unique text (order would be required for multiple-char confusables)\r\n\t\t\t\t\ttype = g.N;\r\n\t\t\t\t\t// 20230121: consider exposing restricted flag\r\n\t\t\t\t\t// it's simpler to just check for 'Restricted'\r\n\t\t\t\t\t// or even better: type.endsWith(']')\r\n\t\t\t\t\t//if (g.R) info.restricted = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tinfo.type = type;\r\n\t\t} catch (err) {\r\n\t\t\tinfo.error = err; // use full error object\r\n\t\t}\r\n\t\treturn info;\r\n\t});\r\n}\r\n\r\nfunction check_whole(group, unique) {\r\n\tlet maker;\r\n\tlet shared = [];\r\n\tfor (let cp of unique) {\r\n\t\tlet whole = WHOLE_MAP.get(cp);\r\n\t\tif (whole === UNIQUE_PH) return; // unique, non-confusable\r\n\t\tif (whole) {\r\n\t\t\tlet set = whole.M.get(cp); // groups which have a character that look-like this character\r\n\t\t\tmaker = maker ? maker.filter(g => set.has(g)) : Array_from(set);\r\n\t\t\tif (!maker.length) return; // confusable intersection is empty\r\n\t\t} else {\r\n\t\t\tshared.push(cp); \r\n\t\t}\r\n\t}\r\n\tif (maker) {\r\n\t\t// we have 1+ confusable\r\n\t\t// check if any of the remaining groups\r\n\t\t// contain the shared characters too\r\n\t\tfor (let g of maker) {\r\n\t\t\tif (shared.every(cp => group_has_cp(g, cp))) {\r\n\t\t\t\tthrow new Error(`whole-script confusable: ${group.N}/${g.N}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// assumption: unique.size > 0\r\n// returns list of matching groups\r\nfunction determine_group(unique) {\r\n\tlet groups = GROUPS;\r\n\tfor (let cp of unique) {\r\n\t\t// note: we need to dodge CM that are whitelisted\r\n\t\t// but that code isn't currently necessary\r\n\t\tlet gs = groups.filter(g => group_has_cp(g, cp));\r\n\t\tif (!gs.length) {\r\n\t\t\tif (!GROUPS.some(g => group_has_cp(g, cp))) { \r\n\t\t\t\t// the character was composed of valid parts\r\n\t\t\t\t// but it's NFC form is invalid\r\n\t\t\t\t// 20230716: change to more exact statement, see: ENSNormalize.{cs,java}\r\n\t\t\t\t// note: this doesn't have to be a composition\r\n\t\t\t\t// 20230720: change to full check\r\n\t\t\t\tthrow error_disallowed(cp); // this should be rare\r\n\t\t\t} else {\r\n\t\t\t\t// there is no group that contains all these characters\r\n\t\t\t\t// throw using the highest priority group that matched\r\n\t\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\t\tthrow error_group_member(groups[0], cp);\r\n\t\t\t}\r\n\t\t}\r\n\t\tgroups = gs;\r\n\t\tif (gs.length == 1) break; // there is only one group left\r\n\t}\r\n\t// there are at least 1 group(s) with all of these characters\r\n\treturn groups;\r\n}\r\n\r\n// throw on first error\r\nfunction flatten(split) {\r\n\treturn split.map(({input, error, output}) => {\r\n\t\tif (error) {\r\n\t\t\t// don't print label again if just a single label\r\n\t\t\tlet msg = error.message;\r\n\t\t\t// bidi_qq() only necessary if msg is digits\r\n\t\t\tthrow new Error(split.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input))}: ${msg}`); \r\n\t\t}\r\n\t\treturn str_from_cps(output);\r\n\t}).join(STOP_CH);\r\n}\r\n\r\nfunction error_disallowed(cp) {\r\n\t// TODO: add cp to error?\r\n\treturn new Error(`disallowed character: ${quoted_cp(cp)}`); \r\n}\r\nfunction error_group_member(g, cp) {\r\n\tlet quoted = quoted_cp(cp);\r\n\tlet gg = GROUPS.find(g => g.P.has(cp)); // only check primary\r\n\tif (gg) {\r\n\t\tquoted = `${gg.N} ${quoted}`;\r\n\t}\r\n\treturn new Error(`illegal mixture: ${g.N} + ${quoted}`);\r\n}\r\nfunction error_placement(where) {\r\n\treturn new Error(`illegal placement: ${where}`);\r\n}\r\n\r\n// assumption: cps.length > 0\r\n// assumption: cps[0] isn't a CM\r\n// assumption: the previous character isn't an emoji\r\nfunction check_group(g, cps) {\r\n\tfor (let cp of cps) {\r\n\t\tif (!group_has_cp(g, cp)) {\r\n\t\t\t// for whitelisted scripts, this will throw illegal mixture on invalid cm, eg. \"e{300}{300}\"\r\n\t\t\t// at the moment, it's unnecessary to introduce an extra error type\r\n\t\t\t// until there exists a whitelisted multi-character\r\n\t\t\t//   eg. if (M < 0 && is_combining_mark(cp)) { ... }\r\n\t\t\t// there are 3 cases:\r\n\t\t\t//   1. illegal cm for wrong group => mixture error\r\n\t\t\t//   2. illegal cm for same group => cm error\r\n\t\t\t//       requires set of whitelist cm per group: \r\n\t\t\t//        eg. new Set([...g.P, ...g.Q].flatMap(nfc).filter(cp => CM.has(cp)))\r\n\t\t\t//   3. wrong group => mixture error\r\n\t\t\tthrow error_group_member(g, cp);\r\n\t\t}\r\n\t}\r\n\t//if (M >= 0) { // we have a known fixed cm count\r\n\tif (g.M) { // we need to check for NSM\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // see: assumption\r\n\t\t\t// 20230210: bugfix: using cps instead of decomposed h/t Carbon225\r\n\t\t\t/*\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: ${g.N} ${bidi_qq(str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t// 20230217: switch to NSM counting\r\n\t\t\t// https://www.unicode.org/reports/tr39/#Optional_Detection\r\n\t\t\tif (NSM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\tfor (let cp; j < e && NSM.has(cp = decomposed[j]); j++) {\r\n\t\t\t\t\t// a. Forbid sequences of the same nonspacing mark.\r\n\t\t\t\t\tfor (let k = i; k < j; k++) { // O(n^2) but n < 100\r\n\t\t\t\t\t\tif (decomposed[k] == cp) {\r\n\t\t\t\t\t\t\tthrow new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// parse to end so we have full nsm count\r\n\t\t\t\t// b. Forbid sequences of more than 4 nonspacing marks (gc=Mn or gc=Me).\r\n\t\t\t\tif (j - i > NSM_MAX) {\r\n\t\t\t\t\t// note: this slice starts with a base char or spacing-mark cm\r\n\t\t\t\t\tthrow new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${NSM_MAX})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// *** this code currently isn't needed ***\r\n\t/*\r\n\tlet cm_whitelist = M instanceof Map;\r\n\tfor (let i = 0, e = cps.length; i < e; ) {\r\n\t\tlet cp = cps[i++];\r\n\t\tlet seqs = cm_whitelist && M.get(cp);\r\n\t\tif (seqs) { \r\n\t\t\t// list of codepoints that can follow\r\n\t\t\t// if this exists, this will always be 1+\r\n\t\t\tlet j = i;\r\n\t\t\twhile (j < e && CM.has(cps[j])) j++;\r\n\t\t\tlet cms = cps.slice(i, j);\r\n\t\t\tlet match = seqs.find(seq => !compare_arrays(seq, cms));\r\n\t\t\tif (!match) throw new Error(`disallowed combining mark sequence: \"${safe_str_from_cps([cp, ...cms])}\"`);\r\n\t\t\ti = j;\r\n\t\t} else if (!V.has(cp)) {\r\n\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\tlet quoted = quoted_cp(cp);\r\n\t\t\tfor (let cp of cps) {\r\n\t\t\t\tlet u = UNIQUE.get(cp);\r\n\t\t\t\tif (u && u !== g) {\r\n\t\t\t\t\t// if both scripts are restricted this error is confusing\r\n\t\t\t\t\t// because we don't differentiate RestrictedA from RestrictedB \r\n\t\t\t\t\tif (!u.R) quoted = `${quoted} is ${u.N}`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new Error(`disallowed ${g.N} character: ${quoted}`);\r\n\t\t\t//throw new Error(`disallowed character: ${quoted} (expected ${g.N})`);\r\n\t\t\t//throw new Error(`${g.N} does not allow: ${quoted}`);\r\n\t\t}\r\n\t}\r\n\tif (!cm_whitelist) {\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // we know it can't be cm leading\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: \"${str_from_cps(decomposed.slice(i-1, j))}\" (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t*/\r\n}\r\n\r\n// given a list of codepoints\r\n// returns a list of lists, where emoji are a fully-qualified (as Array subclass)\r\n// eg. explode_cp(\"abc💩d\") => [[61, 62, 63], Emoji[1F4A9, FE0F], [64]]\r\n// 20230818: rename for 'process' name collision h/t Javarome\r\n// https://github.com/adraffy/ens-normalize.js/issues/23\r\nfunction tokens_from_str(input, nf, ef) {\r\n\tlet ret = [];\r\n\tlet chars = [];\r\n\tinput = input.slice().reverse(); // flip so we can pop\r\n\twhile (input.length) {\r\n\t\tlet emoji = consume_emoji_reversed(input);\r\n\t\tif (emoji) {\r\n\t\t\tif (chars.length) {\r\n\t\t\t\tret.push(nf(chars));\r\n\t\t\t\tchars = [];\r\n\t\t\t}\r\n\t\t\tret.push(ef(emoji));\r\n\t\t} else {\r\n\t\t\tlet cp = input.pop();\r\n\t\t\tif (VALID.has(cp)) {\r\n\t\t\t\tchars.push(cp);\r\n\t\t\t} else {\r\n\t\t\t\tlet cps = MAPPED.get(cp);\r\n\t\t\t\tif (cps) {\r\n\t\t\t\t\tchars.push(...cps); // less than 10 elements\r\n\t\t\t\t} else if (!IGNORED.has(cp)) {\r\n\t\t\t\t\t// 20230912: unicode 15.1 changed the order of processing such that\r\n\t\t\t\t\t// disallowed parts are only rejected after NFC\r\n\t\t\t\t\t// https://unicode.org/reports/tr46/#Validity_Criteria\r\n\t\t\t\t\t// this doesn't impact normalization as of today\r\n\t\t\t\t\t// technically, this error can be removed as the group logic will apply similar logic\r\n\t\t\t\t\t// however the error type might be less clear\r\n\t\t\t\t\tthrow error_disallowed(cp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (chars.length) {\r\n\t\tret.push(nf(chars));\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction filter_fe0f(cps) {\r\n\treturn cps.filter(cp => cp != FE0F);\r\n}\r\n\r\n// given array of codepoints\r\n// returns the longest valid emoji sequence (or undefined if no match)\r\n// *MUTATES* the supplied array\r\n// disallows interleaved ignored characters\r\n// fills (optional) eaten array with matched codepoints\r\nfunction consume_emoji_reversed(cps, eaten) {\r\n\tlet node = EMOJI_ROOT;\r\n\tlet emoji;\r\n\tlet pos = cps.length;\r\n\twhile (pos) {\r\n\t\tnode = node.get(cps[--pos]);\r\n\t\tif (!node) break;\r\n\t\tlet {V} = node;\r\n\t\tif (V) { // this is a valid emoji (so far)\r\n\t\t\temoji = V;\r\n\t\t\tif (eaten) eaten.push(...cps.slice(pos).reverse()); // (optional) copy input, used for ens_tokenize()\r\n\t\t\tcps.length = pos; // truncate\r\n\t\t}\r\n\t}\r\n\treturn emoji;\r\n}\n\n/**\n * @description Normalizes ENS name according to ENSIP-15.\n *\n * @example\n * normalize('wevm.eth')\n * 'wevm.eth'\n *\n * @see https://docs.ens.domains/contract-api-reference/name-processing#normalising-names\n * @see https://github.com/ensdomains/docs/blob/9edf9443de4333a0ea7ec658a870672d5d180d53/ens-improvement-proposals/ensip-15-normalization-standard.md\n */\nfunction normalize(name) {\n    return ens_normalize(name);\n}\n\n/* [Multicall3](https://github.com/mds1/multicall) */\nconst multicall3Abi = [\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        name: 'target',\n                        type: 'address',\n                    },\n                    {\n                        name: 'allowFailure',\n                        type: 'bool',\n                    },\n                    {\n                        name: 'callData',\n                        type: 'bytes',\n                    },\n                ],\n                name: 'calls',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'aggregate3',\n        outputs: [\n            {\n                components: [\n                    {\n                        name: 'success',\n                        type: 'bool',\n                    },\n                    {\n                        name: 'returnData',\n                        type: 'bytes',\n                    },\n                ],\n                name: 'returnData',\n                type: 'tuple[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n];\nconst universalResolverErrors = [\n    {\n        inputs: [],\n        name: 'ResolverNotFound',\n        type: 'error',\n    },\n    {\n        inputs: [],\n        name: 'ResolverWildcardNotSupported',\n        type: 'error',\n    },\n    {\n        inputs: [],\n        name: 'ResolverNotContract',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                name: 'returnData',\n                type: 'bytes',\n            },\n        ],\n        name: 'ResolverError',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        name: 'status',\n                        type: 'uint16',\n                    },\n                    {\n                        name: 'message',\n                        type: 'string',\n                    },\n                ],\n                name: 'errors',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'HttpError',\n        type: 'error',\n    },\n];\nconst universalResolverResolveAbi = [\n    ...universalResolverErrors,\n    {\n        name: 'resolve',\n        type: 'function',\n        stateMutability: 'view',\n        inputs: [\n            { name: 'name', type: 'bytes' },\n            { name: 'data', type: 'bytes' },\n        ],\n        outputs: [\n            { name: '', type: 'bytes' },\n            { name: 'address', type: 'address' },\n        ],\n    },\n    {\n        name: 'resolve',\n        type: 'function',\n        stateMutability: 'view',\n        inputs: [\n            { name: 'name', type: 'bytes' },\n            { name: 'data', type: 'bytes' },\n            { name: 'gateways', type: 'string[]' },\n        ],\n        outputs: [\n            { name: '', type: 'bytes' },\n            { name: 'address', type: 'address' },\n        ],\n    },\n];\nconst universalResolverReverseAbi = [\n    ...universalResolverErrors,\n    {\n        name: 'reverse',\n        type: 'function',\n        stateMutability: 'view',\n        inputs: [{ type: 'bytes', name: 'reverseName' }],\n        outputs: [\n            { type: 'string', name: 'resolvedName' },\n            { type: 'address', name: 'resolvedAddress' },\n            { type: 'address', name: 'reverseResolver' },\n            { type: 'address', name: 'resolver' },\n        ],\n    },\n    {\n        name: 'reverse',\n        type: 'function',\n        stateMutability: 'view',\n        inputs: [\n            { type: 'bytes', name: 'reverseName' },\n            { type: 'string[]', name: 'gateways' },\n        ],\n        outputs: [\n            { type: 'string', name: 'resolvedName' },\n            { type: 'address', name: 'resolvedAddress' },\n            { type: 'address', name: 'reverseResolver' },\n            { type: 'address', name: 'resolver' },\n        ],\n    },\n];\nconst textResolverAbi = [\n    {\n        name: 'text',\n        type: 'function',\n        stateMutability: 'view',\n        inputs: [\n            { name: 'name', type: 'bytes32' },\n            { name: 'key', type: 'string' },\n        ],\n        outputs: [{ name: '', type: 'string' }],\n    },\n];\nconst addressResolverAbi = [\n    {\n        name: 'addr',\n        type: 'function',\n        stateMutability: 'view',\n        inputs: [{ name: 'name', type: 'bytes32' }],\n        outputs: [{ name: '', type: 'address' }],\n    },\n    {\n        name: 'addr',\n        type: 'function',\n        stateMutability: 'view',\n        inputs: [\n            { name: 'name', type: 'bytes32' },\n            { name: 'coinType', type: 'uint256' },\n        ],\n        outputs: [{ name: '', type: 'bytes' }],\n    },\n];\n\nfunction formatAbiItem$1(abiItem, { includeName = false } = {}) {\n    if (abiItem.type !== 'function' &&\n        abiItem.type !== 'event' &&\n        abiItem.type !== 'error')\n        throw new InvalidDefinitionTypeError(abiItem.type);\n    return `${abiItem.name}(${formatAbiParams(abiItem.inputs, { includeName })})`;\n}\nfunction formatAbiParams(params, { includeName = false } = {}) {\n    if (!params)\n        return '';\n    return params\n        .map((param) => formatAbiParam(param, { includeName }))\n        .join(includeName ? ', ' : ',');\n}\nfunction formatAbiParam(param, { includeName }) {\n    if (param.type.startsWith('tuple')) {\n        return `(${formatAbiParams(param.components, { includeName })})${param.type.slice('tuple'.length)}`;\n    }\n    return param.type + (includeName && param.name ? ` ${param.name}` : '');\n}\n\nclass AbiDecodingDataSizeTooSmallError extends BaseError {\n    constructor({ data, params, size, }) {\n        super([`Data size of ${size} bytes is too small for given parameters.`].join('\\n'), {\n            metaMessages: [\n                `Params: (${formatAbiParams(params, { includeName: true })})`,\n                `Data:   ${data} (${size} bytes)`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiDecodingDataSizeTooSmallError'\n        });\n        Object.defineProperty(this, \"data\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"params\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"size\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.data = data;\n        this.params = params;\n        this.size = size;\n    }\n}\nclass AbiDecodingZeroDataError extends BaseError {\n    constructor() {\n        super('Cannot decode zero data (\"0x\") with ABI parameters.');\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiDecodingZeroDataError'\n        });\n    }\n}\nclass AbiEncodingArrayLengthMismatchError extends BaseError {\n    constructor({ expectedLength, givenLength, type, }) {\n        super([\n            `ABI encoding array length mismatch for type ${type}.`,\n            `Expected length: ${expectedLength}`,\n            `Given length: ${givenLength}`,\n        ].join('\\n'));\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiEncodingArrayLengthMismatchError'\n        });\n    }\n}\nclass AbiEncodingBytesSizeMismatchError extends BaseError {\n    constructor({ expectedSize, value }) {\n        super(`Size of bytes \"${value}\" (bytes${size(value)}) does not match expected size (bytes${expectedSize}).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiEncodingBytesSizeMismatchError'\n        });\n    }\n}\nclass AbiEncodingLengthMismatchError extends BaseError {\n    constructor({ expectedLength, givenLength, }) {\n        super([\n            'ABI encoding params/values length mismatch.',\n            `Expected length (params): ${expectedLength}`,\n            `Given length (values): ${givenLength}`,\n        ].join('\\n'));\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiEncodingLengthMismatchError'\n        });\n    }\n}\nclass AbiErrorSignatureNotFoundError extends BaseError {\n    constructor(signature, { docsPath }) {\n        super([\n            `Encoded error signature \"${signature}\" not found on ABI.`,\n            'Make sure you are using the correct ABI and that the error exists on it.',\n            `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`,\n        ].join('\\n'), {\n            docsPath,\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiErrorSignatureNotFoundError'\n        });\n        Object.defineProperty(this, \"signature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.signature = signature;\n    }\n}\nclass AbiFunctionNotFoundError extends BaseError {\n    constructor(functionName, { docsPath } = {}) {\n        super([\n            `Function ${functionName ? `\"${functionName}\" ` : ''}not found on ABI.`,\n            'Make sure you are using the correct ABI and that the function exists on it.',\n        ].join('\\n'), {\n            docsPath,\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiFunctionNotFoundError'\n        });\n    }\n}\nclass AbiFunctionOutputsNotFoundError extends BaseError {\n    constructor(functionName, { docsPath }) {\n        super([\n            `Function \"${functionName}\" does not contain any \\`outputs\\` on ABI.`,\n            'Cannot decode function result without knowing what the parameter types are.',\n            'Make sure you are using the correct ABI and that the function exists on it.',\n        ].join('\\n'), {\n            docsPath,\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiFunctionOutputsNotFoundError'\n        });\n    }\n}\nclass AbiItemAmbiguityError extends BaseError {\n    constructor(x, y) {\n        super('Found ambiguous types in overloaded ABI items.', {\n            metaMessages: [\n                `\\`${x.type}\\` in \\`${formatAbiItem$1(x.abiItem)}\\`, and`,\n                `\\`${y.type}\\` in \\`${formatAbiItem$1(y.abiItem)}\\``,\n                '',\n                'These types encode differently and cannot be distinguished at runtime.',\n                'Remove one of the ambiguous items in the ABI.',\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiItemAmbiguityError'\n        });\n    }\n}\nclass InvalidAbiEncodingTypeError extends BaseError {\n    constructor(type, { docsPath }) {\n        super([\n            `Type \"${type}\" is not a valid encoding type.`,\n            'Please provide a valid ABI type.',\n        ].join('\\n'), { docsPath });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidAbiEncodingType'\n        });\n    }\n}\nclass InvalidAbiDecodingTypeError extends BaseError {\n    constructor(type, { docsPath }) {\n        super([\n            `Type \"${type}\" is not a valid decoding type.`,\n            'Please provide a valid ABI type.',\n        ].join('\\n'), { docsPath });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidAbiDecodingType'\n        });\n    }\n}\nclass InvalidArrayError extends BaseError {\n    constructor(value) {\n        super([`Value \"${value}\" is not a valid array.`].join('\\n'));\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidArrayError'\n        });\n    }\n}\nclass InvalidDefinitionTypeError extends BaseError {\n    constructor(type) {\n        super([\n            `\"${type}\" is not a valid definition type.`,\n            'Valid types: \"function\", \"event\", \"error\"',\n        ].join('\\n'));\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidDefinitionTypeError'\n        });\n    }\n}\n\n/**\n * Decodes a byte array into a bigint.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestobigint\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns BigInt value.\n *\n * @example\n * import { bytesToBigInt } from 'viem'\n * const data = bytesToBigInt(new Uint8Array([1, 164]))\n * // 420n\n */\nfunction bytesToBigInt(bytes, opts = {}) {\n    if (typeof opts.size !== 'undefined')\n        assertSize(bytes, { size: opts.size });\n    const hex = bytesToHex(bytes, opts);\n    return hexToBigInt(hex, opts);\n}\n/**\n * Decodes a byte array into a boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestobool\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns Boolean value.\n *\n * @example\n * import { bytesToBool } from 'viem'\n * const data = bytesToBool(new Uint8Array([1]))\n * // true\n */\nfunction bytesToBool(bytes_, opts = {}) {\n    let bytes = bytes_;\n    if (typeof opts.size !== 'undefined') {\n        assertSize(bytes, { size: opts.size });\n        bytes = trim(bytes);\n    }\n    if (bytes.length > 1 || bytes[0] > 1)\n        throw new InvalidBytesBooleanError(bytes);\n    return Boolean(bytes[0]);\n}\n/**\n * Decodes a byte array into a number.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestonumber\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns Number value.\n *\n * @example\n * import { bytesToNumber } from 'viem'\n * const data = bytesToNumber(new Uint8Array([1, 164]))\n * // 420\n */\nfunction bytesToNumber(bytes, opts = {}) {\n    if (typeof opts.size !== 'undefined')\n        assertSize(bytes, { size: opts.size });\n    const hex = bytesToHex(bytes, opts);\n    return hexToNumber(hex, opts);\n}\n/**\n * Decodes a byte array into a UTF-8 string.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestostring\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns String value.\n *\n * @example\n * import { bytesToString } from 'viem'\n * const data = bytesToString(new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\n * // 'Hello world'\n */\nfunction bytesToString(bytes_, opts = {}) {\n    let bytes = bytes_;\n    if (typeof opts.size !== 'undefined') {\n        assertSize(bytes, { size: opts.size });\n        bytes = trim(bytes, { dir: 'right' });\n    }\n    return new TextDecoder().decode(bytes);\n}\n\n/**\n * @description Encodes a list of primitive values into an ABI-encoded hex value.\n *\n * - Docs: https://viem.sh/docs/abi/encodeAbiParameters#encodeabiparameters\n *\n *   Generates ABI encoded data using the [ABI specification](https://docs.soliditylang.org/en/latest/abi-spec), given a set of ABI parameters (inputs/outputs) and their corresponding values.\n *\n * @param params - a set of ABI Parameters (params), that can be in the shape of the inputs or outputs attribute of an ABI Item.\n * @param values - a set of values (values) that correspond to the given params.\n * @example\n * ```typescript\n * import { encodeAbiParameters } from 'viem'\n *\n * const encodedData = encodeAbiParameters(\n *   [\n *     { name: 'x', type: 'string' },\n *     { name: 'y', type: 'uint' },\n *     { name: 'z', type: 'bool' }\n *   ],\n *   ['wagmi', 420n, true]\n * )\n * ```\n *\n * You can also pass in Human Readable parameters with the parseAbiParameters utility.\n *\n * @example\n * ```typescript\n * import { encodeAbiParameters, parseAbiParameters } from 'viem'\n *\n * const encodedData = encodeAbiParameters(\n *   parseAbiParameters('string x, uint y, bool z'),\n *   ['wagmi', 420n, true]\n * )\n * ```\n */\nfunction encodeAbiParameters(params, values) {\n    if (params.length !== values.length)\n        throw new AbiEncodingLengthMismatchError({\n            expectedLength: params.length,\n            givenLength: values.length,\n        });\n    // Prepare the parameters to determine dynamic types to encode.\n    const preparedParams = prepareParams({\n        params: params,\n        values: values,\n    });\n    const data = encodeParams(preparedParams);\n    if (data.length === 0)\n        return '0x';\n    return data;\n}\nfunction prepareParams({ params, values, }) {\n    const preparedParams = [];\n    for (let i = 0; i < params.length; i++) {\n        preparedParams.push(prepareParam({ param: params[i], value: values[i] }));\n    }\n    return preparedParams;\n}\nfunction prepareParam({ param, value, }) {\n    const arrayComponents = getArrayComponents(param.type);\n    if (arrayComponents) {\n        const [length, type] = arrayComponents;\n        return encodeArray(value, { length, param: { ...param, type } });\n    }\n    if (param.type === 'tuple') {\n        return encodeTuple(value, {\n            param: param,\n        });\n    }\n    if (param.type === 'address') {\n        return encodeAddress(value);\n    }\n    if (param.type === 'bool') {\n        return encodeBool(value);\n    }\n    if (param.type.startsWith('uint') || param.type.startsWith('int')) {\n        const signed = param.type.startsWith('int');\n        return encodeNumber(value, { signed });\n    }\n    if (param.type.startsWith('bytes')) {\n        return encodeBytes(value, { param });\n    }\n    if (param.type === 'string') {\n        return encodeString(value);\n    }\n    throw new InvalidAbiEncodingTypeError(param.type, {\n        docsPath: '/docs/contract/encodeAbiParameters',\n    });\n}\nfunction encodeParams(preparedParams) {\n    // 1. Compute the size of the static part of the parameters.\n    let staticSize = 0;\n    for (let i = 0; i < preparedParams.length; i++) {\n        const { dynamic, encoded } = preparedParams[i];\n        if (dynamic)\n            staticSize += 32;\n        else\n            staticSize += size(encoded);\n    }\n    // 2. Split the parameters into static and dynamic parts.\n    const staticParams = [];\n    const dynamicParams = [];\n    let dynamicSize = 0;\n    for (let i = 0; i < preparedParams.length; i++) {\n        const { dynamic, encoded } = preparedParams[i];\n        if (dynamic) {\n            staticParams.push(numberToHex(staticSize + dynamicSize, { size: 32 }));\n            dynamicParams.push(encoded);\n            dynamicSize += size(encoded);\n        }\n        else {\n            staticParams.push(encoded);\n        }\n    }\n    // 3. Concatenate static and dynamic parts.\n    return concat([...staticParams, ...dynamicParams]);\n}\nfunction encodeAddress(value) {\n    if (!isAddress(value))\n        throw new InvalidAddressError({ address: value });\n    return { dynamic: false, encoded: padHex(value.toLowerCase()) };\n}\nfunction encodeArray(value, { length, param, }) {\n    const dynamic = length === null;\n    if (!Array.isArray(value))\n        throw new InvalidArrayError(value);\n    if (!dynamic && value.length !== length)\n        throw new AbiEncodingArrayLengthMismatchError({\n            expectedLength: length,\n            givenLength: value.length,\n            type: `${param.type}[${length}]`,\n        });\n    let dynamicChild = false;\n    const preparedParams = [];\n    for (let i = 0; i < value.length; i++) {\n        const preparedParam = prepareParam({ param, value: value[i] });\n        if (preparedParam.dynamic)\n            dynamicChild = true;\n        preparedParams.push(preparedParam);\n    }\n    if (dynamic || dynamicChild) {\n        const data = encodeParams(preparedParams);\n        if (dynamic) {\n            const length = numberToHex(preparedParams.length, { size: 32 });\n            return {\n                dynamic: true,\n                encoded: preparedParams.length > 0 ? concat([length, data]) : length,\n            };\n        }\n        if (dynamicChild)\n            return { dynamic: true, encoded: data };\n    }\n    return {\n        dynamic: false,\n        encoded: concat(preparedParams.map(({ encoded }) => encoded)),\n    };\n}\nfunction encodeBytes(value, { param }) {\n    const [, paramSize] = param.type.split('bytes');\n    const bytesSize = size(value);\n    if (!paramSize) {\n        let value_ = value;\n        // If the size is not divisible by 32 bytes, pad the end\n        // with empty bytes to the ceiling 32 bytes.\n        if (bytesSize % 32 !== 0)\n            value_ = padHex(value_, {\n                dir: 'right',\n                size: Math.ceil((value.length - 2) / 2 / 32) * 32,\n            });\n        return {\n            dynamic: true,\n            encoded: concat([padHex(numberToHex(bytesSize, { size: 32 })), value_]),\n        };\n    }\n    if (bytesSize !== Number.parseInt(paramSize))\n        throw new AbiEncodingBytesSizeMismatchError({\n            expectedSize: Number.parseInt(paramSize),\n            value,\n        });\n    return { dynamic: false, encoded: padHex(value, { dir: 'right' }) };\n}\nfunction encodeBool(value) {\n    if (typeof value !== 'boolean')\n        throw new BaseError(`Invalid boolean value: \"${value}\" (type: ${typeof value}). Expected: \\`true\\` or \\`false\\`.`);\n    return { dynamic: false, encoded: padHex(boolToHex(value)) };\n}\nfunction encodeNumber(value, { signed }) {\n    return {\n        dynamic: false,\n        encoded: numberToHex(value, {\n            size: 32,\n            signed,\n        }),\n    };\n}\nfunction encodeString(value) {\n    const hexValue = stringToHex(value);\n    const partsLength = Math.ceil(size(hexValue) / 32);\n    const parts = [];\n    for (let i = 0; i < partsLength; i++) {\n        parts.push(padHex(slice(hexValue, i * 32, (i + 1) * 32), {\n            dir: 'right',\n        }));\n    }\n    return {\n        dynamic: true,\n        encoded: concat([\n            padHex(numberToHex(size(hexValue), { size: 32 })),\n            ...parts,\n        ]),\n    };\n}\nfunction encodeTuple(value, { param }) {\n    let dynamic = false;\n    const preparedParams = [];\n    for (let i = 0; i < param.components.length; i++) {\n        const param_ = param.components[i];\n        const index = Array.isArray(value) ? i : param_.name;\n        const preparedParam = prepareParam({\n            param: param_,\n            value: value[index],\n        });\n        preparedParams.push(preparedParam);\n        if (preparedParam.dynamic)\n            dynamic = true;\n    }\n    return {\n        dynamic,\n        encoded: dynamic\n            ? encodeParams(preparedParams)\n            : concat(preparedParams.map(({ encoded }) => encoded)),\n    };\n}\nfunction getArrayComponents(type) {\n    const matches = type.match(/^(.*)\\[(\\d+)?\\]$/);\n    return matches\n        ? // Return `null` if the array is dynamic.\n            [matches[2] ? Number(matches[2]) : null, matches[1]]\n        : undefined;\n}\n\nfunction decodeAbiParameters(params, data) {\n    const bytes = typeof data === 'string' ? hexToBytes(data) : data;\n    const cursor = createCursor(bytes);\n    if (size(bytes) === 0 && params.length > 0)\n        throw new AbiDecodingZeroDataError();\n    if (size(data) && size(data) < 32)\n        throw new AbiDecodingDataSizeTooSmallError({\n            data: typeof data === 'string' ? data : bytesToHex(data),\n            params: params,\n            size: size(data),\n        });\n    let consumed = 0;\n    const values = [];\n    for (let i = 0; i < params.length; ++i) {\n        const param = params[i];\n        cursor.setPosition(consumed);\n        const [data, consumed_] = decodeParameter(cursor, param, {\n            staticPosition: 0,\n        });\n        consumed += consumed_;\n        values.push(data);\n    }\n    return values;\n}\nfunction decodeParameter(cursor, param, { staticPosition }) {\n    const arrayComponents = getArrayComponents(param.type);\n    if (arrayComponents) {\n        const [length, type] = arrayComponents;\n        return decodeArray(cursor, { ...param, type }, { length, staticPosition });\n    }\n    if (param.type === 'tuple')\n        return decodeTuple(cursor, param, { staticPosition });\n    if (param.type === 'address')\n        return decodeAddress(cursor);\n    if (param.type === 'bool')\n        return decodeBool(cursor);\n    if (param.type.startsWith('bytes'))\n        return decodeBytes(cursor, param, { staticPosition });\n    if (param.type.startsWith('uint') || param.type.startsWith('int'))\n        return decodeNumber(cursor, param);\n    if (param.type === 'string')\n        return decodeString(cursor, { staticPosition });\n    throw new InvalidAbiDecodingTypeError(param.type, {\n        docsPath: '/docs/contract/decodeAbiParameters',\n    });\n}\n////////////////////////////////////////////////////////////////////\n// Type Decoders\nconst sizeOfLength = 32;\nconst sizeOfOffset = 32;\nfunction decodeAddress(cursor) {\n    const value = cursor.readBytes(32);\n    return [checksumAddress(bytesToHex(sliceBytes(value, -20))), 32];\n}\nfunction decodeArray(cursor, param, { length, staticPosition }) {\n    // If the length of the array is not known in advance (dynamic array),\n    // this means we will need to wonder off to the pointer and decode.\n    if (!length) {\n        // Dealing with a dynamic type, so get the offset of the array data.\n        const offset = bytesToNumber(cursor.readBytes(sizeOfOffset));\n        // Start is the static position of current slot + offset.\n        const start = staticPosition + offset;\n        const startOfData = start + sizeOfLength;\n        // Get the length of the array from the offset.\n        cursor.setPosition(start);\n        const length = bytesToNumber(cursor.readBytes(sizeOfLength));\n        // Check if the array has any dynamic children.\n        const dynamicChild = hasDynamicChild(param);\n        let consumed = 0;\n        const value = [];\n        for (let i = 0; i < length; ++i) {\n            // If any of the children is dynamic, then all elements will be offset pointer, thus size of one slot (32 bytes).\n            // Otherwise, elements will be the size of their encoding (consumed bytes).\n            cursor.setPosition(startOfData + (dynamicChild ? i * 32 : consumed));\n            const [data, consumed_] = decodeParameter(cursor, param, {\n                staticPosition: startOfData,\n            });\n            consumed += consumed_;\n            value.push(data);\n        }\n        // As we have gone wondering, restore to the original position + next slot.\n        cursor.setPosition(staticPosition + 32);\n        return [value, 32];\n    }\n    // If the length of the array is known in advance,\n    // and the length of an element deeply nested in the array is not known,\n    // we need to decode the offset of the array data.\n    if (hasDynamicChild(param)) {\n        // Dealing with dynamic types, so get the offset of the array data.\n        const offset = bytesToNumber(cursor.readBytes(sizeOfOffset));\n        // Start is the static position of current slot + offset.\n        const start = staticPosition + offset;\n        const value = [];\n        for (let i = 0; i < length; ++i) {\n            // Move cursor along to the next slot (next offset pointer).\n            cursor.setPosition(start + i * 32);\n            const [data] = decodeParameter(cursor, param, {\n                staticPosition: start,\n            });\n            value.push(data);\n        }\n        // As we have gone wondering, restore to the original position + next slot.\n        cursor.setPosition(staticPosition + 32);\n        return [value, 32];\n    }\n    // If the length of the array is known in advance and the array is deeply static,\n    // then we can just decode each element in sequence.\n    let consumed = 0;\n    const value = [];\n    for (let i = 0; i < length; ++i) {\n        const [data, consumed_] = decodeParameter(cursor, param, {\n            staticPosition: staticPosition + consumed,\n        });\n        consumed += consumed_;\n        value.push(data);\n    }\n    return [value, consumed];\n}\nfunction decodeBool(cursor) {\n    return [bytesToBool(cursor.readBytes(32), { size: 32 }), 32];\n}\nfunction decodeBytes(cursor, param, { staticPosition }) {\n    const [_, size] = param.type.split('bytes');\n    if (!size) {\n        // Dealing with dynamic types, so get the offset of the bytes data.\n        const offset = bytesToNumber(cursor.readBytes(32));\n        // Set position of the cursor to start of bytes data.\n        cursor.setPosition(staticPosition + offset);\n        const length = bytesToNumber(cursor.readBytes(32));\n        // If there is no length, we have zero data.\n        if (length === 0) {\n            // As we have gone wondering, restore to the original position + next slot.\n            cursor.setPosition(staticPosition + 32);\n            return ['0x', 32];\n        }\n        const data = cursor.readBytes(length);\n        // As we have gone wondering, restore to the original position + next slot.\n        cursor.setPosition(staticPosition + 32);\n        return [bytesToHex(data), 32];\n    }\n    const value = bytesToHex(cursor.readBytes(Number.parseInt(size), 32));\n    return [value, 32];\n}\nfunction decodeNumber(cursor, param) {\n    const signed = param.type.startsWith('int');\n    const size = Number.parseInt(param.type.split('int')[1] || '256');\n    const value = cursor.readBytes(32);\n    return [\n        size > 48\n            ? bytesToBigInt(value, { signed })\n            : bytesToNumber(value, { signed }),\n        32,\n    ];\n}\nfunction decodeTuple(cursor, param, { staticPosition }) {\n    // Tuples can have unnamed components (i.e. they are arrays), so we must\n    // determine whether the tuple is named or unnamed. In the case of a named\n    // tuple, the value will be an object where each property is the name of the\n    // component. In the case of an unnamed tuple, the value will be an array.\n    const hasUnnamedChild = param.components.length === 0 || param.components.some(({ name }) => !name);\n    // Initialize the value to an object or an array, depending on whether the\n    // tuple is named or unnamed.\n    const value = hasUnnamedChild ? [] : {};\n    let consumed = 0;\n    // If the tuple has a dynamic child, we must first decode the offset to the\n    // tuple data.\n    if (hasDynamicChild(param)) {\n        // Dealing with dynamic types, so get the offset of the tuple data.\n        const offset = bytesToNumber(cursor.readBytes(sizeOfOffset));\n        // Start is the static position of referencing slot + offset.\n        const start = staticPosition + offset;\n        for (let i = 0; i < param.components.length; ++i) {\n            const component = param.components[i];\n            cursor.setPosition(start + consumed);\n            const [data, consumed_] = decodeParameter(cursor, component, {\n                staticPosition: start,\n            });\n            consumed += consumed_;\n            value[hasUnnamedChild ? i : component?.name] = data;\n        }\n        // As we have gone wondering, restore to the original position + next slot.\n        cursor.setPosition(staticPosition + 32);\n        return [value, 32];\n    }\n    // If the tuple has static children, we can just decode each component\n    // in sequence.\n    for (let i = 0; i < param.components.length; ++i) {\n        const component = param.components[i];\n        const [data, consumed_] = decodeParameter(cursor, component, {\n            staticPosition,\n        });\n        value[hasUnnamedChild ? i : component?.name] = data;\n        consumed += consumed_;\n    }\n    return [value, consumed];\n}\nfunction decodeString(cursor, { staticPosition }) {\n    // Get offset to start of string data.\n    const offset = bytesToNumber(cursor.readBytes(32));\n    // Start is the static position of current slot + offset.\n    const start = staticPosition + offset;\n    cursor.setPosition(start);\n    const length = bytesToNumber(cursor.readBytes(32));\n    // If there is no length, we have zero data (empty string).\n    if (length === 0) {\n        cursor.setPosition(staticPosition + 32);\n        return ['', 32];\n    }\n    const data = cursor.readBytes(length, 32);\n    const value = bytesToString(trim(data));\n    // As we have gone wondering, restore to the original position + next slot.\n    cursor.setPosition(staticPosition + 32);\n    return [value, 32];\n}\nfunction hasDynamicChild(param) {\n    const { type } = param;\n    if (type === 'string')\n        return true;\n    if (type === 'bytes')\n        return true;\n    if (type.endsWith('[]'))\n        return true;\n    if (type === 'tuple')\n        return param.components?.some(hasDynamicChild);\n    const arrayComponents = getArrayComponents(param.type);\n    if (arrayComponents &&\n        hasDynamicChild({ ...param, type: arrayComponents[1] }))\n        return true;\n    return false;\n}\n\nconst hash = (value) => keccak256(toBytes(value));\nfunction hashSignature(sig) {\n    return hash(sig);\n}\n\n// TODO: This looks cool. Need to check the performance of `new RegExp` versus defined inline though.\n// https://twitter.com/GabrielVergnaud/status/1622906834343366657\nfunction execTyped(regex, string) {\n    const match = regex.exec(string);\n    return match?.groups;\n}\n\n// https://regexr.com/7f7rv\nconst tupleRegex = /^tuple(?<array>(\\[(\\d*)\\])*)$/;\n/**\n * Formats {@link AbiParameter} to human-readable ABI parameter.\n *\n * @param abiParameter - ABI parameter\n * @returns Human-readable ABI parameter\n *\n * @example\n * const result = formatAbiParameter({ type: 'address', name: 'from' })\n * //    ^? const result: 'address from'\n */\nfunction formatAbiParameter(abiParameter) {\n    let type = abiParameter.type;\n    if (tupleRegex.test(abiParameter.type) && 'components' in abiParameter) {\n        type = '(';\n        const length = abiParameter.components.length;\n        for (let i = 0; i < length; i++) {\n            const component = abiParameter.components[i];\n            type += formatAbiParameter(component);\n            if (i < length - 1)\n                type += ', ';\n        }\n        const result = execTyped(tupleRegex, abiParameter.type);\n        type += `)${result?.array ?? ''}`;\n        return formatAbiParameter({\n            ...abiParameter,\n            type,\n        });\n    }\n    // Add `indexed` to type if in `abiParameter`\n    if ('indexed' in abiParameter && abiParameter.indexed)\n        type = `${type} indexed`;\n    // Return human-readable ABI parameter\n    if (abiParameter.name)\n        return `${type} ${abiParameter.name}`;\n    return type;\n}\n\n/**\n * Formats {@link AbiParameter}s to human-readable ABI parameters.\n *\n * @param abiParameters - ABI parameters\n * @returns Human-readable ABI parameters\n *\n * @example\n * const result = formatAbiParameters([\n *   //  ^? const result: 'address from, uint256 tokenId'\n *   { type: 'address', name: 'from' },\n *   { type: 'uint256', name: 'tokenId' },\n * ])\n */\nfunction formatAbiParameters(abiParameters) {\n    let params = '';\n    const length = abiParameters.length;\n    for (let i = 0; i < length; i++) {\n        const abiParameter = abiParameters[i];\n        params += formatAbiParameter(abiParameter);\n        if (i !== length - 1)\n            params += ', ';\n    }\n    return params;\n}\n\n/**\n * Formats ABI item (e.g. error, event, function) into human-readable ABI item\n *\n * @param abiItem - ABI item\n * @returns Human-readable ABI item\n */\nfunction formatAbiItem(abiItem) {\n    if (abiItem.type === 'function')\n        return `function ${abiItem.name}(${formatAbiParameters(abiItem.inputs)})${abiItem.stateMutability && abiItem.stateMutability !== 'nonpayable'\n            ? ` ${abiItem.stateMutability}`\n            : ''}${abiItem.outputs.length\n            ? ` returns (${formatAbiParameters(abiItem.outputs)})`\n            : ''}`;\n    else if (abiItem.type === 'event')\n        return `event ${abiItem.name}(${formatAbiParameters(abiItem.inputs)})`;\n    else if (abiItem.type === 'error')\n        return `error ${abiItem.name}(${formatAbiParameters(abiItem.inputs)})`;\n    else if (abiItem.type === 'constructor')\n        return `constructor(${formatAbiParameters(abiItem.inputs)})${abiItem.stateMutability === 'payable' ? ' payable' : ''}`;\n    else if (abiItem.type === 'fallback')\n        return 'fallback()';\n    return 'receive() external payable';\n}\n\nfunction normalizeSignature(signature) {\n    let active = true;\n    let current = '';\n    let level = 0;\n    let result = '';\n    let valid = false;\n    for (let i = 0; i < signature.length; i++) {\n        const char = signature[i];\n        // If the character is a separator, we want to reactivate.\n        if (['(', ')', ','].includes(char))\n            active = true;\n        // If the character is a \"level\" token, we want to increment/decrement.\n        if (char === '(')\n            level++;\n        if (char === ')')\n            level--;\n        // If we aren't active, we don't want to mutate the result.\n        if (!active)\n            continue;\n        // If level === 0, we are at the definition level.\n        if (level === 0) {\n            if (char === ' ' && ['event', 'function', ''].includes(result))\n                result = '';\n            else {\n                result += char;\n                // If we are at the end of the definition, we must be finished.\n                if (char === ')') {\n                    valid = true;\n                    break;\n                }\n            }\n            continue;\n        }\n        // Ignore spaces\n        if (char === ' ') {\n            // If the previous character is a separator, and the current section isn't empty, we want to deactivate.\n            if (signature[i - 1] !== ',' && current !== ',' && current !== ',(') {\n                current = '';\n                active = false;\n            }\n            continue;\n        }\n        result += char;\n        current += char;\n    }\n    if (!valid)\n        throw new BaseError('Unable to normalize signature.');\n    return result;\n}\n\n/**\n * Returns the signature for a given function or event definition.\n *\n * @example\n * const signature = toSignature('function ownerOf(uint256 tokenId)')\n * // 'ownerOf(uint256)'\n *\n * @example\n * const signature_3 = toSignature({\n *   name: 'ownerOf',\n *   type: 'function',\n *   inputs: [{ name: 'tokenId', type: 'uint256' }],\n *   outputs: [],\n *   stateMutability: 'view',\n * })\n * // 'ownerOf(uint256)'\n */\nconst toSignature = (def) => {\n    const def_ = (() => {\n        if (typeof def === 'string')\n            return def;\n        return formatAbiItem(def);\n    })();\n    return normalizeSignature(def_);\n};\n\n/**\n * Returns the hash (of the function/event signature) for a given event or function definition.\n */\nfunction toSignatureHash(fn) {\n    return hashSignature(toSignature(fn));\n}\n\n/**\n * Returns the event selector for a given event definition.\n *\n * @example\n * const selector = toEventSelector('Transfer(address indexed from, address indexed to, uint256 amount)')\n * // 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n */\nconst toEventSelector = toSignatureHash;\n\n/**\n * Returns the function selector for a given function definition.\n *\n * @example\n * const selector = toFunctionSelector('function ownerOf(uint256 tokenId)')\n * // 0x6352211e\n */\nconst toFunctionSelector = (fn) => slice(toSignatureHash(fn), 0, 4);\n\nfunction getAbiItem(parameters) {\n    const { abi, args = [], name } = parameters;\n    const isSelector = isHex(name, { strict: false });\n    const abiItems = abi.filter((abiItem) => {\n        if (isSelector) {\n            if (abiItem.type === 'function')\n                return toFunctionSelector(abiItem) === name;\n            if (abiItem.type === 'event')\n                return toEventSelector(abiItem) === name;\n            return false;\n        }\n        return 'name' in abiItem && abiItem.name === name;\n    });\n    if (abiItems.length === 0)\n        return undefined;\n    if (abiItems.length === 1)\n        return abiItems[0];\n    let matchedAbiItem = undefined;\n    for (const abiItem of abiItems) {\n        if (!('inputs' in abiItem))\n            continue;\n        if (!args || args.length === 0) {\n            if (!abiItem.inputs || abiItem.inputs.length === 0)\n                return abiItem;\n            continue;\n        }\n        if (!abiItem.inputs)\n            continue;\n        if (abiItem.inputs.length === 0)\n            continue;\n        if (abiItem.inputs.length !== args.length)\n            continue;\n        const matched = args.every((arg, index) => {\n            const abiParameter = 'inputs' in abiItem && abiItem.inputs[index];\n            if (!abiParameter)\n                return false;\n            return isArgOfType(arg, abiParameter);\n        });\n        if (matched) {\n            // Check for ambiguity against already matched parameters (e.g. `address` vs `bytes20`).\n            if (matchedAbiItem &&\n                'inputs' in matchedAbiItem &&\n                matchedAbiItem.inputs) {\n                const ambiguousTypes = getAmbiguousTypes(abiItem.inputs, matchedAbiItem.inputs, args);\n                if (ambiguousTypes)\n                    throw new AbiItemAmbiguityError({\n                        abiItem,\n                        type: ambiguousTypes[0],\n                    }, {\n                        abiItem: matchedAbiItem,\n                        type: ambiguousTypes[1],\n                    });\n            }\n            matchedAbiItem = abiItem;\n        }\n    }\n    if (matchedAbiItem)\n        return matchedAbiItem;\n    return abiItems[0];\n}\nfunction isArgOfType(arg, abiParameter) {\n    const argType = typeof arg;\n    const abiParameterType = abiParameter.type;\n    switch (abiParameterType) {\n        case 'address':\n            return isAddress(arg, { strict: false });\n        case 'bool':\n            return argType === 'boolean';\n        case 'function':\n            return argType === 'string';\n        case 'string':\n            return argType === 'string';\n        default: {\n            if (abiParameterType === 'tuple' && 'components' in abiParameter)\n                return Object.values(abiParameter.components).every((component, index) => {\n                    return isArgOfType(Object.values(arg)[index], component);\n                });\n            // `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n            // https://regexr.com/6v8hp\n            if (/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(abiParameterType))\n                return argType === 'number' || argType === 'bigint';\n            // `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n            // https://regexr.com/6va55\n            if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType))\n                return argType === 'string' || arg instanceof Uint8Array;\n            // fixed-length (`<type>[M]`) and dynamic (`<type>[]`) arrays\n            // https://regexr.com/6va6i\n            if (/[a-z]+[1-9]{0,3}(\\[[0-9]{0,}\\])+$/.test(abiParameterType)) {\n                return (Array.isArray(arg) &&\n                    arg.every((x) => isArgOfType(x, {\n                        ...abiParameter,\n                        // Pop off `[]` or `[M]` from end of type\n                        type: abiParameterType.replace(/(\\[[0-9]{0,}\\])$/, ''),\n                    })));\n            }\n            return false;\n        }\n    }\n}\nfunction getAmbiguousTypes(sourceParameters, targetParameters, args) {\n    for (const parameterIndex in sourceParameters) {\n        const sourceParameter = sourceParameters[parameterIndex];\n        const targetParameter = targetParameters[parameterIndex];\n        if (sourceParameter.type === 'tuple' &&\n            targetParameter.type === 'tuple' &&\n            'components' in sourceParameter &&\n            'components' in targetParameter)\n            return getAmbiguousTypes(sourceParameter.components, targetParameter.components, args[parameterIndex]);\n        const types = [sourceParameter.type, targetParameter.type];\n        const ambiguous = (() => {\n            if (types.includes('address') && types.includes('bytes20'))\n                return true;\n            if (types.includes('address') && types.includes('string'))\n                return isAddress(args[parameterIndex], { strict: false });\n            if (types.includes('address') && types.includes('bytes'))\n                return isAddress(args[parameterIndex], { strict: false });\n            return false;\n        })();\n        if (ambiguous)\n            return types;\n    }\n    return;\n}\n\nconst docsPath$1 = '/docs/contract/decodeFunctionResult';\nfunction decodeFunctionResult(parameters) {\n    const { abi, args, functionName, data } = parameters;\n    let abiItem = abi[0];\n    if (functionName) {\n        const item = getAbiItem({ abi, args, name: functionName });\n        if (!item)\n            throw new AbiFunctionNotFoundError(functionName, { docsPath: docsPath$1 });\n        abiItem = item;\n    }\n    if (abiItem.type !== 'function')\n        throw new AbiFunctionNotFoundError(undefined, { docsPath: docsPath$1 });\n    if (!abiItem.outputs)\n        throw new AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath: docsPath$1 });\n    const values = decodeAbiParameters(abiItem.outputs, data);\n    if (values && values.length > 1)\n        return values;\n    if (values && values.length === 1)\n        return values[0];\n    return undefined;\n}\n\nconst docsPath = '/docs/contract/encodeFunctionData';\nfunction prepareEncodeFunctionData(parameters) {\n    const { abi, args, functionName } = parameters;\n    let abiItem = abi[0];\n    if (functionName) {\n        const item = getAbiItem({\n            abi,\n            args,\n            name: functionName,\n        });\n        if (!item)\n            throw new AbiFunctionNotFoundError(functionName, { docsPath });\n        abiItem = item;\n    }\n    if (abiItem.type !== 'function')\n        throw new AbiFunctionNotFoundError(undefined, { docsPath });\n    return {\n        abi: [abiItem],\n        functionName: toFunctionSelector(formatAbiItem$1(abiItem)),\n    };\n}\n\nfunction encodeFunctionData(parameters) {\n    const { args } = parameters;\n    const { abi, functionName } = (() => {\n        if (parameters.abi.length === 1 &&\n            parameters.functionName?.startsWith('0x'))\n            return parameters;\n        return prepareEncodeFunctionData(parameters);\n    })();\n    const abiItem = abi[0];\n    const signature = functionName;\n    const data = 'inputs' in abiItem && abiItem.inputs\n        ? encodeAbiParameters(abiItem.inputs, args ?? [])\n        : undefined;\n    return concatHex([signature, data ?? '0x']);\n}\n\nfunction getChainContractAddress({ blockNumber, chain, contract: name, }) {\n    const contract = chain?.contracts?.[name];\n    if (!contract)\n        throw new ChainDoesNotSupportContract({\n            chain,\n            contract: { name },\n        });\n    if (blockNumber &&\n        contract.blockCreated &&\n        contract.blockCreated > blockNumber)\n        throw new ChainDoesNotSupportContract({\n            blockNumber,\n            chain,\n            contract: {\n                name,\n                blockCreated: contract.blockCreated,\n            },\n        });\n    return contract.address;\n}\n\n// https://docs.soliditylang.org/en/v0.8.16/control-structures.html#panic-via-assert-and-error-via-require\nconst panicReasons = {\n    1: 'An `assert` condition failed.',\n    17: 'Arithmetic operation resulted in underflow or overflow.',\n    18: 'Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).',\n    33: 'Attempted to convert to an invalid type.',\n    34: 'Attempted to access a storage byte array that is incorrectly encoded.',\n    49: 'Performed `.pop()` on an empty array',\n    50: 'Array index is out of bounds.',\n    65: 'Allocated too much memory or created an array which is too large.',\n    81: 'Attempted to call a zero-initialized variable of internal function type.',\n};\nconst solidityError = {\n    inputs: [\n        {\n            name: 'message',\n            type: 'string',\n        },\n    ],\n    name: 'Error',\n    type: 'error',\n};\nconst solidityPanic = {\n    inputs: [\n        {\n            name: 'reason',\n            type: 'uint256',\n        },\n    ],\n    name: 'Panic',\n    type: 'error',\n};\n\nfunction parseAccount(account) {\n    if (typeof account === 'string')\n        return { address: account, type: 'json-rpc' };\n    return account;\n}\n\nfunction decodeErrorResult(parameters) {\n    const { abi, data } = parameters;\n    const signature = slice(data, 0, 4);\n    if (signature === '0x')\n        throw new AbiDecodingZeroDataError();\n    const abi_ = [...(abi || []), solidityError, solidityPanic];\n    const abiItem = abi_.find((x) => x.type === 'error' && signature === toFunctionSelector(formatAbiItem$1(x)));\n    if (!abiItem)\n        throw new AbiErrorSignatureNotFoundError(signature, {\n            docsPath: '/docs/contract/decodeErrorResult',\n        });\n    return {\n        abiItem,\n        args: 'inputs' in abiItem && abiItem.inputs && abiItem.inputs.length > 0\n            ? decodeAbiParameters(abiItem.inputs, slice(data, 4))\n            : undefined,\n        errorName: abiItem.name,\n    };\n}\n\nconst stringify = (value, replacer, space) => JSON.stringify(value, (key, value_) => {\n    const value = typeof value_ === 'bigint' ? value_.toString() : value_;\n    return typeof replacer === 'function' ? replacer(key, value) : value;\n}, space);\n\nfunction formatAbiItemWithArgs({ abiItem, args, includeFunctionName = true, includeName = false, }) {\n    if (!('name' in abiItem))\n        return;\n    if (!('inputs' in abiItem))\n        return;\n    if (!abiItem.inputs)\n        return;\n    return `${includeFunctionName ? abiItem.name : ''}(${abiItem.inputs\n        .map((input, i) => `${includeName && input.name ? `${input.name}: ` : ''}${typeof args[i] === 'object' ? stringify(args[i]) : args[i]}`)\n        .join(', ')})`;\n}\n\nclass AccountStateConflictError extends BaseError {\n    constructor({ address }) {\n        super(`State for account \"${address}\" is set multiple times.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AccountStateConflictError'\n        });\n    }\n}\nclass StateAssignmentConflictError extends BaseError {\n    constructor() {\n        super('state and stateDiff are set on the same account.');\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'StateAssignmentConflictError'\n        });\n    }\n}\nfunction prettyStateMapping(stateMapping) {\n    return stateMapping.reduce((pretty, { slot, value }) => {\n        return `${pretty}        ${slot}: ${value}\\n`;\n    }, '');\n}\nfunction prettyStateOverride(stateOverride) {\n    return stateOverride\n        .reduce((pretty, { address, ...state }) => {\n        let val = `${pretty}    ${address}:\\n`;\n        if (state.nonce)\n            val += `      nonce: ${state.nonce}\\n`;\n        if (state.balance)\n            val += `      balance: ${state.balance}\\n`;\n        if (state.code)\n            val += `      code: ${state.code}\\n`;\n        if (state.state) {\n            val += '      state:\\n';\n            val += prettyStateMapping(state.state);\n        }\n        if (state.stateDiff) {\n            val += '      stateDiff:\\n';\n            val += prettyStateMapping(state.stateDiff);\n        }\n        return val;\n    }, '  State Override:\\n')\n        .slice(0, -1);\n}\n\nclass CallExecutionError extends BaseError {\n    constructor(cause, { account: account_, docsPath, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, stateOverride, }) {\n        const account = account_ ? parseAccount(account_) : undefined;\n        let prettyArgs = prettyPrint({\n            from: account?.address,\n            to,\n            value: typeof value !== 'undefined' &&\n                `${formatEther(value)} ${chain?.nativeCurrency?.symbol || 'ETH'}`,\n            data,\n            gas,\n            gasPrice: typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,\n            maxFeePerGas: typeof maxFeePerGas !== 'undefined' &&\n                `${formatGwei(maxFeePerGas)} gwei`,\n            maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== 'undefined' &&\n                `${formatGwei(maxPriorityFeePerGas)} gwei`,\n            nonce,\n        });\n        if (stateOverride) {\n            prettyArgs += `\\n${prettyStateOverride(stateOverride)}`;\n        }\n        super(cause.shortMessage, {\n            cause,\n            docsPath,\n            metaMessages: [\n                ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n                'Raw Call Arguments:',\n                prettyArgs,\n            ].filter(Boolean),\n        });\n        Object.defineProperty(this, \"cause\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'CallExecutionError'\n        });\n        this.cause = cause;\n    }\n}\nclass ContractFunctionExecutionError extends BaseError {\n    constructor(cause, { abi, args, contractAddress, docsPath, functionName, sender, }) {\n        const abiItem = getAbiItem({ abi, args, name: functionName });\n        const formattedArgs = abiItem\n            ? formatAbiItemWithArgs({\n                abiItem,\n                args,\n                includeFunctionName: false,\n                includeName: false,\n            })\n            : undefined;\n        const functionWithParams = abiItem\n            ? formatAbiItem$1(abiItem, { includeName: true })\n            : undefined;\n        const prettyArgs = prettyPrint({\n            address: contractAddress && getContractAddress(contractAddress),\n            function: functionWithParams,\n            args: formattedArgs &&\n                formattedArgs !== '()' &&\n                `${[...Array(functionName?.length ?? 0).keys()]\n                    .map(() => ' ')\n                    .join('')}${formattedArgs}`,\n            sender,\n        });\n        super(cause.shortMessage ||\n            `An unknown error occurred while executing the contract function \"${functionName}\".`, {\n            cause,\n            docsPath,\n            metaMessages: [\n                ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n                'Contract Call:',\n                prettyArgs,\n            ].filter(Boolean),\n        });\n        Object.defineProperty(this, \"abi\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"args\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"cause\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"contractAddress\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"formattedArgs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"functionName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"sender\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'ContractFunctionExecutionError'\n        });\n        this.abi = abi;\n        this.args = args;\n        this.cause = cause;\n        this.contractAddress = contractAddress;\n        this.functionName = functionName;\n        this.sender = sender;\n    }\n}\nclass ContractFunctionRevertedError extends BaseError {\n    constructor({ abi, data, functionName, message, }) {\n        let cause;\n        let decodedData = undefined;\n        let metaMessages;\n        let reason;\n        if (data && data !== '0x') {\n            try {\n                decodedData = decodeErrorResult({ abi, data });\n                const { abiItem, errorName, args: errorArgs } = decodedData;\n                if (errorName === 'Error') {\n                    reason = errorArgs[0];\n                }\n                else if (errorName === 'Panic') {\n                    const [firstArg] = errorArgs;\n                    reason = panicReasons[firstArg];\n                }\n                else {\n                    const errorWithParams = abiItem\n                        ? formatAbiItem$1(abiItem, { includeName: true })\n                        : undefined;\n                    const formattedArgs = abiItem && errorArgs\n                        ? formatAbiItemWithArgs({\n                            abiItem,\n                            args: errorArgs,\n                            includeFunctionName: false,\n                            includeName: false,\n                        })\n                        : undefined;\n                    metaMessages = [\n                        errorWithParams ? `Error: ${errorWithParams}` : '',\n                        formattedArgs && formattedArgs !== '()'\n                            ? `       ${[...Array(errorName?.length ?? 0).keys()]\n                                .map(() => ' ')\n                                .join('')}${formattedArgs}`\n                            : '',\n                    ];\n                }\n            }\n            catch (err) {\n                cause = err;\n            }\n        }\n        else if (message)\n            reason = message;\n        let signature;\n        if (cause instanceof AbiErrorSignatureNotFoundError) {\n            signature = cause.signature;\n            metaMessages = [\n                `Unable to decode signature \"${signature}\" as it was not found on the provided ABI.`,\n                'Make sure you are using the correct ABI and that the error exists on it.',\n                `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`,\n            ];\n        }\n        super((reason && reason !== 'execution reverted') || signature\n            ? [\n                `The contract function \"${functionName}\" reverted with the following ${signature ? 'signature' : 'reason'}:`,\n                reason || signature,\n            ].join('\\n')\n            : `The contract function \"${functionName}\" reverted.`, {\n            cause,\n            metaMessages,\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'ContractFunctionRevertedError'\n        });\n        Object.defineProperty(this, \"data\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"reason\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"signature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.data = decodedData;\n        this.reason = reason;\n        this.signature = signature;\n    }\n}\nclass ContractFunctionZeroDataError extends BaseError {\n    constructor({ functionName }) {\n        super(`The contract function \"${functionName}\" returned no data (\"0x\").`, {\n            metaMessages: [\n                'This could be due to any of the following:',\n                `  - The contract does not have the function \"${functionName}\",`,\n                '  - The parameters passed to the contract function may be invalid, or',\n                '  - The address is not a contract.',\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'ContractFunctionZeroDataError'\n        });\n    }\n}\nclass RawContractError extends BaseError {\n    constructor({ data, message, }) {\n        super(message || '');\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'RawContractError'\n        });\n        Object.defineProperty(this, \"data\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.data = data;\n    }\n}\n\n/*\n * @description Checks if error is a valid null result UniversalResolver error\n */\nfunction isNullUniversalResolverError(err, callType) {\n    if (!(err instanceof BaseError))\n        return false;\n    const cause = err.walk((e) => e instanceof ContractFunctionRevertedError);\n    if (!(cause instanceof ContractFunctionRevertedError))\n        return false;\n    if (cause.data?.errorName === 'ResolverNotFound')\n        return true;\n    if (cause.data?.errorName === 'ResolverWildcardNotSupported')\n        return true;\n    if (cause.data?.errorName === 'ResolverNotContract')\n        return true;\n    if (cause.data?.errorName === 'ResolverError')\n        return true;\n    if (cause.data?.errorName === 'HttpError')\n        return true;\n    // Backwards compatibility for older UniversalResolver contracts\n    if (cause.reason?.includes('Wildcard on non-extended resolvers is not supported'))\n        return true;\n    // No primary name set for address.\n    if (callType === 'reverse' && cause.reason === panicReasons[50])\n        return true;\n    return false;\n}\n\nfunction encodedLabelToLabelhash(label) {\n    if (label.length !== 66)\n        return null;\n    if (label.indexOf('[') !== 0)\n        return null;\n    if (label.indexOf(']') !== 65)\n        return null;\n    const hash = `0x${label.slice(1, 65)}`;\n    if (!isHex(hash))\n        return null;\n    return hash;\n}\n\n/**\n * @description Hashes ENS name\n *\n * - Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `namehash`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @example\n * namehash('wevm.eth')\n * '0xf246651c1b9a6b141d19c2604e9a58f567973833990f830d882534a747801359'\n *\n * @link https://eips.ethereum.org/EIPS/eip-137\n */\nfunction namehash(name) {\n    let result = new Uint8Array(32).fill(0);\n    if (!name)\n        return bytesToHex(result);\n    const labels = name.split('.');\n    // Iterate in reverse order building up hash\n    for (let i = labels.length - 1; i >= 0; i -= 1) {\n        const hashFromEncodedLabel = encodedLabelToLabelhash(labels[i]);\n        const hashed = hashFromEncodedLabel\n            ? toBytes(hashFromEncodedLabel)\n            : keccak256(stringToBytes(labels[i]), 'bytes');\n        result = keccak256(concat([result, hashed]), 'bytes');\n    }\n    return bytesToHex(result);\n}\n\nfunction encodeLabelhash(hash) {\n    return `[${hash.slice(2)}]`;\n}\n\n/**\n * @description Hashes ENS label\n *\n * - Since ENS labels prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS labels](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `labelhash`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @example\n * labelhash('eth')\n * '0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0'\n */\nfunction labelhash(label) {\n    const result = new Uint8Array(32).fill(0);\n    if (!label)\n        return bytesToHex(result);\n    return encodedLabelToLabelhash(label) || keccak256(stringToBytes(label));\n}\n\n/*\n * @description Encodes a DNS packet into a ByteArray containing a UDP payload.\n *\n * @example\n * packetToBytes('awkweb.eth')\n * '0x0661776b7765620365746800'\n *\n * @see https://docs.ens.domains/resolution/names#dns\n *\n */\nfunction packetToBytes(packet) {\n    // strip leading and trailing `.`\n    const value = packet.replace(/^\\.|\\.$/gm, '');\n    if (value.length === 0)\n        return new Uint8Array(1);\n    const bytes = new Uint8Array(stringToBytes(value).byteLength + 2);\n    let offset = 0;\n    const list = value.split('.');\n    for (let i = 0; i < list.length; i++) {\n        let encoded = stringToBytes(list[i]);\n        // if the length is > 255, make the encoded label value a labelhash\n        // this is compatible with the universal resolver\n        if (encoded.byteLength > 255)\n            encoded = stringToBytes(encodeLabelhash(labelhash(list[i])));\n        bytes[offset] = encoded.length;\n        bytes.set(encoded, offset + 1);\n        offset += encoded.length + 1;\n    }\n    if (bytes.byteLength !== offset + 1)\n        return bytes.slice(0, offset + 1);\n    return bytes;\n}\n\n/**\n * Retrieves and returns an action from the client (if exists), and falls\n * back to the tree-shakable action.\n *\n * Useful for extracting overridden actions from a client (ie. if a consumer\n * wants to override the `sendTransaction` implementation).\n */\nfunction getAction(client, action, \n// Some minifiers drop `Function.prototype.name` or can change function\n// names so that getting the name by reflection through `action.name` will\n// not work.\nname) {\n    return (params) => client[action.name]?.(params) ??\n        client[name]?.(params) ??\n        action(client, params);\n}\n\nclass HttpRequestError extends BaseError {\n    constructor({ body, details, headers, status, url, }) {\n        super('HTTP request failed.', {\n            details,\n            metaMessages: [\n                status && `Status: ${status}`,\n                `URL: ${getUrl(url)}`,\n                body && `Request body: ${stringify(body)}`,\n            ].filter(Boolean),\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'HttpRequestError'\n        });\n        Object.defineProperty(this, \"body\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"headers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"url\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.url = url;\n    }\n}\nclass RpcRequestError extends BaseError {\n    constructor({ body, error, url, }) {\n        super('RPC Request failed.', {\n            cause: error,\n            details: error.message,\n            metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'RpcRequestError'\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.code = error.code;\n    }\n}\n\nconst unknownErrorCode = -1;\nclass RpcError extends BaseError {\n    constructor(cause, { code, docsPath, metaMessages, shortMessage }) {\n        super(shortMessage, {\n            cause,\n            docsPath,\n            metaMessages: metaMessages || cause?.metaMessages,\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'RpcError'\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = cause.name;\n        this.code = (cause instanceof RpcRequestError ? cause.code : code ?? unknownErrorCode);\n    }\n}\nclass InternalRpcError extends RpcError {\n    constructor(cause) {\n        super(cause, {\n            code: InternalRpcError.code,\n            shortMessage: 'An internal error was received.',\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InternalRpcError'\n        });\n    }\n}\nObject.defineProperty(InternalRpcError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32603\n});\n\nconst EXECUTION_REVERTED_ERROR_CODE = 3;\nfunction getContractError(err, { abi, address, args, docsPath, functionName, sender, }) {\n    const { code, data, message, shortMessage } = (err instanceof RawContractError\n        ? err\n        : err instanceof BaseError\n            ? err.walk((err) => 'data' in err) || err.walk()\n            : {});\n    const cause = (() => {\n        if (err instanceof AbiDecodingZeroDataError)\n            return new ContractFunctionZeroDataError({ functionName });\n        if ([EXECUTION_REVERTED_ERROR_CODE, InternalRpcError.code].includes(code) &&\n            (data || message || shortMessage)) {\n            return new ContractFunctionRevertedError({\n                abi,\n                data: typeof data === 'object' ? data.data : data,\n                functionName,\n                message: shortMessage ?? message,\n            });\n        }\n        return err;\n    })();\n    return new ContractFunctionExecutionError(cause, {\n        abi,\n        args,\n        contractAddress: address,\n        docsPath,\n        functionName,\n        sender,\n    });\n}\n\nconst aggregate3Signature = '0x82ad56cb';\n\nfunction getNodeError(err, args) {\n    const message = (err.details || '').toLowerCase();\n    const executionRevertedError = err instanceof BaseError\n        ? err.walk((e) => e.code === ExecutionRevertedError.code)\n        : err;\n    if (executionRevertedError instanceof BaseError) {\n        return new ExecutionRevertedError({\n            cause: err,\n            message: executionRevertedError.details,\n        });\n    }\n    if (ExecutionRevertedError.nodeMessage.test(message))\n        return new ExecutionRevertedError({\n            cause: err,\n            message: err.details,\n        });\n    if (FeeCapTooHighError.nodeMessage.test(message))\n        return new FeeCapTooHighError({\n            cause: err,\n            maxFeePerGas: args?.maxFeePerGas,\n        });\n    if (FeeCapTooLowError.nodeMessage.test(message))\n        return new FeeCapTooLowError({\n            cause: err,\n            maxFeePerGas: args?.maxFeePerGas,\n        });\n    if (NonceTooHighError.nodeMessage.test(message))\n        return new NonceTooHighError({ cause: err, nonce: args?.nonce });\n    if (NonceTooLowError.nodeMessage.test(message))\n        return new NonceTooLowError({ cause: err, nonce: args?.nonce });\n    if (NonceMaxValueError.nodeMessage.test(message))\n        return new NonceMaxValueError({ cause: err, nonce: args?.nonce });\n    if (InsufficientFundsError.nodeMessage.test(message))\n        return new InsufficientFundsError({ cause: err });\n    if (IntrinsicGasTooHighError.nodeMessage.test(message))\n        return new IntrinsicGasTooHighError({ cause: err, gas: args?.gas });\n    if (IntrinsicGasTooLowError.nodeMessage.test(message))\n        return new IntrinsicGasTooLowError({ cause: err, gas: args?.gas });\n    if (TransactionTypeNotSupportedError.nodeMessage.test(message))\n        return new TransactionTypeNotSupportedError({ cause: err });\n    if (TipAboveFeeCapError.nodeMessage.test(message))\n        return new TipAboveFeeCapError({\n            cause: err,\n            maxFeePerGas: args?.maxFeePerGas,\n            maxPriorityFeePerGas: args?.maxPriorityFeePerGas,\n        });\n    return new UnknownNodeError({\n        cause: err,\n    });\n}\n\nfunction getCallError(err, { docsPath, ...args }) {\n    const cause = (() => {\n        const cause = getNodeError(err, args);\n        if (cause instanceof UnknownNodeError)\n            return err;\n        return cause;\n    })();\n    return new CallExecutionError(cause, {\n        docsPath,\n        ...args,\n    });\n}\n\n/**\n * @description Picks out the keys from `value` that exist in the formatter..\n */\nfunction extract(value_, { format }) {\n    if (!format)\n        return {};\n    const value = {};\n    function extract_(formatted) {\n        const keys = Object.keys(formatted);\n        for (const key of keys) {\n            if (key in value_)\n                value[key] = value_[key];\n            if (formatted[key] &&\n                typeof formatted[key] === 'object' &&\n                !Array.isArray(formatted[key]))\n                extract_(formatted[key]);\n        }\n    }\n    const formatted = format(value_ || {});\n    extract_(formatted);\n    return value;\n}\n\nconst schedulerCache = /*#__PURE__*/ new Map();\nfunction createBatchScheduler({ fn, id, shouldSplitBatch, wait = 0, sort, }) {\n    const exec = async () => {\n        const scheduler = getScheduler();\n        flush();\n        const args = scheduler.map(({ args }) => args);\n        if (args.length === 0)\n            return;\n        fn(args)\n            .then((data) => {\n            if (sort && Array.isArray(data))\n                data.sort(sort);\n            for (let i = 0; i < scheduler.length; i++) {\n                const { pendingPromise } = scheduler[i];\n                pendingPromise.resolve?.([data[i], data]);\n            }\n        })\n            .catch((err) => {\n            for (let i = 0; i < scheduler.length; i++) {\n                const { pendingPromise } = scheduler[i];\n                pendingPromise.reject?.(err);\n            }\n        });\n    };\n    const flush = () => schedulerCache.delete(id);\n    const getBatchedArgs = () => getScheduler().map(({ args }) => args);\n    const getScheduler = () => schedulerCache.get(id) || [];\n    const setScheduler = (item) => schedulerCache.set(id, [...getScheduler(), item]);\n    return {\n        flush,\n        async schedule(args) {\n            const pendingPromise = {};\n            const promise = new Promise((resolve, reject) => {\n                pendingPromise.resolve = resolve;\n                pendingPromise.reject = reject;\n            });\n            const split = shouldSplitBatch?.([...getBatchedArgs(), args]);\n            if (split)\n                exec();\n            const hasActiveScheduler = getScheduler().length > 0;\n            if (hasActiveScheduler) {\n                setScheduler({ args, pendingPromise });\n                return promise;\n            }\n            setScheduler({ args, pendingPromise });\n            setTimeout(exec, wait);\n            return promise;\n        },\n    };\n}\n\nfunction serializeStateMapping(stateMapping) {\n    if (!stateMapping || stateMapping.length === 0)\n        return undefined;\n    return stateMapping.reduce((acc, { slot, value }) => {\n        if (slot.length !== 66)\n            throw new InvalidBytesLengthError({\n                size: slot.length,\n                targetSize: 66,\n                type: 'hex',\n            });\n        if (value.length !== 66)\n            throw new InvalidBytesLengthError({\n                size: value.length,\n                targetSize: 66,\n                type: 'hex',\n            });\n        acc[slot] = value;\n        return acc;\n    }, {});\n}\nfunction serializeAccountStateOverride(parameters) {\n    const { balance, nonce, state, stateDiff, code } = parameters;\n    const rpcAccountStateOverride = {};\n    if (code !== undefined)\n        rpcAccountStateOverride.code = code;\n    if (balance !== undefined)\n        rpcAccountStateOverride.balance = numberToHex(balance);\n    if (nonce !== undefined)\n        rpcAccountStateOverride.nonce = numberToHex(nonce);\n    if (state !== undefined)\n        rpcAccountStateOverride.state = serializeStateMapping(state);\n    if (stateDiff !== undefined) {\n        if (rpcAccountStateOverride.state)\n            throw new StateAssignmentConflictError();\n        rpcAccountStateOverride.stateDiff = serializeStateMapping(stateDiff);\n    }\n    return rpcAccountStateOverride;\n}\nfunction serializeStateOverride(parameters) {\n    if (!parameters)\n        return undefined;\n    const rpcStateOverride = {};\n    for (const { address, ...accountState } of parameters) {\n        if (!isAddress(address, { strict: false }))\n            throw new InvalidAddressError({ address });\n        if (rpcStateOverride[address])\n            throw new AccountStateConflictError({ address: address });\n        rpcStateOverride[address] = serializeAccountStateOverride(accountState);\n    }\n    return rpcStateOverride;\n}\n\nfunction assertRequest(args) {\n    const { account: account_, gasPrice, maxFeePerGas, maxPriorityFeePerGas, to, } = args;\n    const account = account_ ? parseAccount(account_) : undefined;\n    if (account && !isAddress(account.address))\n        throw new InvalidAddressError({ address: account.address });\n    if (to && !isAddress(to))\n        throw new InvalidAddressError({ address: to });\n    if (typeof gasPrice !== 'undefined' &&\n        (typeof maxFeePerGas !== 'undefined' ||\n            typeof maxPriorityFeePerGas !== 'undefined'))\n        throw new FeeConflictError();\n    if (maxFeePerGas && maxFeePerGas > 2n ** 256n - 1n)\n        throw new FeeCapTooHighError({ maxFeePerGas });\n    if (maxPriorityFeePerGas &&\n        maxFeePerGas &&\n        maxPriorityFeePerGas > maxFeePerGas)\n        throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });\n}\n\n/**\n * Executes a new message call immediately without submitting a transaction to the network.\n *\n * - Docs: https://viem.sh/docs/actions/public/call\n * - JSON-RPC Methods: [`eth_call`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call)\n *\n * @param client - Client to use\n * @param parameters - {@link CallParameters}\n * @returns The call data. {@link CallReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { call } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const data = await call(client, {\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * })\n */\nasync function call(client, args) {\n    const { account: account_ = client.account, batch = Boolean(client.batch?.multicall), blockNumber, blockTag = 'latest', accessList, blobs, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, stateOverride, ...rest } = args;\n    const account = account_ ? parseAccount(account_) : undefined;\n    try {\n        assertRequest(args);\n        const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined;\n        const block = blockNumberHex || blockTag;\n        const rpcStateOverride = serializeStateOverride(stateOverride);\n        const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n        const format = chainFormat || formatTransactionRequest;\n        const request = format({\n            // Pick out extra data that might exist on the chain's transaction request type.\n            ...extract(rest, { format: chainFormat }),\n            from: account?.address,\n            accessList,\n            blobs,\n            data,\n            gas,\n            gasPrice,\n            maxFeePerBlobGas,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            nonce,\n            to,\n            value,\n        });\n        if (batch && shouldPerformMulticall({ request }) && !rpcStateOverride) {\n            try {\n                return await scheduleMulticall(client, {\n                    ...request,\n                    blockNumber,\n                    blockTag,\n                });\n            }\n            catch (err) {\n                if (!(err instanceof ClientChainNotConfiguredError) &&\n                    !(err instanceof ChainDoesNotSupportContract))\n                    throw err;\n            }\n        }\n        const response = await client.request({\n            method: 'eth_call',\n            params: rpcStateOverride\n                ? [\n                    request,\n                    block,\n                    rpcStateOverride,\n                ]\n                : [request, block],\n        });\n        if (response === '0x')\n            return { data: undefined };\n        return { data: response };\n    }\n    catch (err) {\n        const data = getRevertErrorData(err);\n        const { offchainLookup, offchainLookupSignature } = await import('./ccip-c78d2f16.js');\n        if (client.ccipRead !== false &&\n            data?.slice(0, 10) === offchainLookupSignature &&\n            to)\n            return { data: await offchainLookup(client, { data, to }) };\n        throw getCallError(err, {\n            ...args,\n            account,\n            chain: client.chain,\n        });\n    }\n}\n// We only want to perform a scheduled multicall if:\n// - The request has calldata,\n// - The request has a target address,\n// - The target address is not already the aggregate3 signature,\n// - The request has no other properties (`nonce`, `gas`, etc cannot be sent with a multicall).\nfunction shouldPerformMulticall({ request }) {\n    const { data, to, ...request_ } = request;\n    if (!data)\n        return false;\n    if (data.startsWith(aggregate3Signature))\n        return false;\n    if (!to)\n        return false;\n    if (Object.values(request_).filter((x) => typeof x !== 'undefined').length > 0)\n        return false;\n    return true;\n}\nasync function scheduleMulticall(client, args) {\n    const { batchSize = 1024, wait = 0 } = typeof client.batch?.multicall === 'object' ? client.batch.multicall : {};\n    const { blockNumber, blockTag = 'latest', data, multicallAddress: multicallAddress_, to, } = args;\n    let multicallAddress = multicallAddress_;\n    if (!multicallAddress) {\n        if (!client.chain)\n            throw new ClientChainNotConfiguredError();\n        multicallAddress = getChainContractAddress({\n            blockNumber,\n            chain: client.chain,\n            contract: 'multicall3',\n        });\n    }\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined;\n    const block = blockNumberHex || blockTag;\n    const { schedule } = createBatchScheduler({\n        id: `${client.uid}.${block}`,\n        wait,\n        shouldSplitBatch(args) {\n            const size = args.reduce((size, { data }) => size + (data.length - 2), 0);\n            return size > batchSize * 2;\n        },\n        fn: async (requests) => {\n            const calls = requests.map((request) => ({\n                allowFailure: true,\n                callData: request.data,\n                target: request.to,\n            }));\n            const calldata = encodeFunctionData({\n                abi: multicall3Abi,\n                args: [calls],\n                functionName: 'aggregate3',\n            });\n            const data = await client.request({\n                method: 'eth_call',\n                params: [\n                    {\n                        data: calldata,\n                        to: multicallAddress,\n                    },\n                    block,\n                ],\n            });\n            return decodeFunctionResult({\n                abi: multicall3Abi,\n                args: [calls],\n                functionName: 'aggregate3',\n                data: data || '0x',\n            });\n        },\n    });\n    const [{ returnData, success }] = await schedule({ data, to });\n    if (!success)\n        throw new RawContractError({ data: returnData });\n    if (returnData === '0x')\n        return { data: undefined };\n    return { data: returnData };\n}\nfunction getRevertErrorData(err) {\n    if (!(err instanceof BaseError))\n        return undefined;\n    const error = err.walk();\n    return typeof error?.data === 'object' ? error.data?.data : error.data;\n}\n\n/**\n * Calls a read-only function on a contract, and returns the response.\n *\n * - Docs: https://viem.sh/docs/contract/readContract\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/reading-contracts\n *\n * A \"read-only\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\n *\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n *\n * @param client - Client to use\n * @param parameters - {@link ReadContractParameters}\n * @returns The response from the contract. Type is inferred. {@link ReadContractReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { readContract } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const result = await readContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function balanceOf(address) view returns (uint256)']),\n *   functionName: 'balanceOf',\n *   args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n * })\n * // 424122n\n */\nasync function readContract(client, parameters) {\n    const { abi, address, args, functionName, ...rest } = parameters;\n    const calldata = encodeFunctionData({\n        abi,\n        args,\n        functionName,\n    });\n    try {\n        const { data } = await getAction(client, call, 'call')({\n            ...rest,\n            data: calldata,\n            to: address,\n        });\n        return decodeFunctionResult({\n            abi,\n            args,\n            functionName,\n            data: data || '0x',\n        });\n    }\n    catch (error) {\n        throw getContractError(error, {\n            abi,\n            address,\n            args,\n            docsPath: '/docs/contract/readContract',\n            functionName,\n        });\n    }\n}\n\n/**\n * Gets address for ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsAddress\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsAddressParameters}\n * @returns Address for ENS name or `null` if not found. {@link GetEnsAddressReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsAddress, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensAddress = await getEnsAddress(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // '0xd2135CfB216b74109775236E36d4b433F1DF507B'\n */\nasync function getEnsAddress(client, { blockNumber, blockTag, coinType, name, gatewayUrls, strict, universalResolverAddress: universalResolverAddress_, }) {\n    let universalResolverAddress = universalResolverAddress_;\n    if (!universalResolverAddress) {\n        if (!client.chain)\n            throw new Error('client chain not configured. universalResolverAddress is required.');\n        universalResolverAddress = getChainContractAddress({\n            blockNumber,\n            chain: client.chain,\n            contract: 'ensUniversalResolver',\n        });\n    }\n    try {\n        const functionData = encodeFunctionData({\n            abi: addressResolverAbi,\n            functionName: 'addr',\n            ...(coinType != null\n                ? { args: [namehash(name), BigInt(coinType)] }\n                : { args: [namehash(name)] }),\n        });\n        const readContractParameters = {\n            address: universalResolverAddress,\n            abi: universalResolverResolveAbi,\n            functionName: 'resolve',\n            args: [toHex(packetToBytes(name)), functionData],\n            blockNumber,\n            blockTag,\n        };\n        const readContractAction = getAction(client, readContract, 'readContract');\n        const res = gatewayUrls\n            ? await readContractAction({\n                ...readContractParameters,\n                args: [...readContractParameters.args, gatewayUrls],\n            })\n            : await readContractAction(readContractParameters);\n        if (res[0] === '0x')\n            return null;\n        const address = decodeFunctionResult({\n            abi: addressResolverAbi,\n            args: coinType != null ? [namehash(name), BigInt(coinType)] : undefined,\n            functionName: 'addr',\n            data: res[0],\n        });\n        if (address === '0x')\n            return null;\n        if (trim(address) === '0x00')\n            return null;\n        return address;\n    }\n    catch (err) {\n        if (strict)\n            throw err;\n        if (isNullUniversalResolverError(err, 'resolve'))\n            return null;\n        throw err;\n    }\n}\n\nclass EnsAvatarInvalidMetadataError extends BaseError {\n    constructor({ data }) {\n        super('Unable to extract image from metadata. The metadata may be malformed or invalid.', {\n            metaMessages: [\n                '- Metadata must be a JSON object with at least an `image`, `image_url` or `image_data` property.',\n                '',\n                `Provided data: ${JSON.stringify(data)}`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'EnsAvatarInvalidMetadataError'\n        });\n    }\n}\nclass EnsAvatarInvalidNftUriError extends BaseError {\n    constructor({ reason }) {\n        super(`ENS NFT avatar URI is invalid. ${reason}`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'EnsAvatarInvalidNftUriError'\n        });\n    }\n}\nclass EnsAvatarUriResolutionError extends BaseError {\n    constructor({ uri }) {\n        super(`Unable to resolve ENS avatar URI \"${uri}\". The URI may be malformed, invalid, or does not respond with a valid image.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'EnsAvatarUriResolutionError'\n        });\n    }\n}\nclass EnsAvatarUnsupportedNamespaceError extends BaseError {\n    constructor({ namespace }) {\n        super(`ENS NFT avatar namespace \"${namespace}\" is not supported. Must be \"erc721\" or \"erc1155\".`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'EnsAvatarUnsupportedNamespaceError'\n        });\n    }\n}\n\nconst networkRegex = /(?<protocol>https?:\\/\\/[^\\/]*|ipfs:\\/|ipns:\\/|ar:\\/)?(?<root>\\/)?(?<subpath>ipfs\\/|ipns\\/)?(?<target>[\\w\\-.]+)(?<subtarget>\\/.*)?/;\nconst ipfsHashRegex = /^(Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,})(\\/(?<target>[\\w\\-.]+))?(?<subtarget>\\/.*)?$/;\nconst base64Regex = /^data:([a-zA-Z\\-/+]*);base64,([^\"].*)/;\nconst dataURIRegex = /^data:([a-zA-Z\\-/+]*)?(;[a-zA-Z0-9].*?)?(,)/;\nasync function isImageUri(uri) {\n    try {\n        const res = await fetch(uri, { method: 'HEAD' });\n        // retrieve content type header to check if content is image\n        if (res.status === 200) {\n            const contentType = res.headers.get('content-type');\n            return contentType?.startsWith('image/');\n        }\n        return false;\n    }\n    catch (error) {\n        // if error is not cors related then fail\n        if (typeof error === 'object' && typeof error.response !== 'undefined') {\n            return false;\n        }\n        // fail in NodeJS, since the error is not cors but any other network issue\n        // biome-ignore lint/suspicious/noPrototypeBuiltins:\n        if (!globalThis.hasOwnProperty('Image'))\n            return false;\n        // in case of cors, use image api to validate if given url is an actual image\n        return new Promise((resolve) => {\n            const img = new Image();\n            img.onload = () => {\n                resolve(true);\n            };\n            img.onerror = () => {\n                resolve(false);\n            };\n            img.src = uri;\n        });\n    }\n}\nfunction getGateway(custom, defaultGateway) {\n    if (!custom)\n        return defaultGateway;\n    if (custom.endsWith('/'))\n        return custom.slice(0, -1);\n    return custom;\n}\nfunction resolveAvatarUri({ uri, gatewayUrls, }) {\n    const isEncoded = base64Regex.test(uri);\n    if (isEncoded)\n        return { uri, isOnChain: true, isEncoded };\n    const ipfsGateway = getGateway(gatewayUrls?.ipfs, 'https://ipfs.io');\n    const arweaveGateway = getGateway(gatewayUrls?.arweave, 'https://arweave.net');\n    const networkRegexMatch = uri.match(networkRegex);\n    const { protocol, subpath, target, subtarget = '', } = networkRegexMatch?.groups || {};\n    const isIPNS = protocol === 'ipns:/' || subpath === 'ipns/';\n    const isIPFS = protocol === 'ipfs:/' || subpath === 'ipfs/' || ipfsHashRegex.test(uri);\n    if (uri.startsWith('http') && !isIPNS && !isIPFS) {\n        let replacedUri = uri;\n        if (gatewayUrls?.arweave)\n            replacedUri = uri.replace(/https:\\/\\/arweave.net/g, gatewayUrls?.arweave);\n        return { uri: replacedUri, isOnChain: false, isEncoded: false };\n    }\n    if ((isIPNS || isIPFS) && target) {\n        return {\n            uri: `${ipfsGateway}/${isIPNS ? 'ipns' : 'ipfs'}/${target}${subtarget}`,\n            isOnChain: false,\n            isEncoded: false,\n        };\n    }\n    if (protocol === 'ar:/' && target) {\n        return {\n            uri: `${arweaveGateway}/${target}${subtarget || ''}`,\n            isOnChain: false,\n            isEncoded: false,\n        };\n    }\n    let parsedUri = uri.replace(dataURIRegex, '');\n    if (parsedUri.startsWith('<svg')) {\n        // if svg, base64 encode\n        parsedUri = `data:image/svg+xml;base64,${btoa(parsedUri)}`;\n    }\n    if (parsedUri.startsWith('data:') || parsedUri.startsWith('{')) {\n        return {\n            uri: parsedUri,\n            isOnChain: true,\n            isEncoded: false,\n        };\n    }\n    throw new EnsAvatarUriResolutionError({ uri });\n}\nfunction getJsonImage(data) {\n    // validation check for json data, must include one of theses properties\n    if (typeof data !== 'object' ||\n        (!('image' in data) && !('image_url' in data) && !('image_data' in data))) {\n        throw new EnsAvatarInvalidMetadataError({ data });\n    }\n    return data.image || data.image_url || data.image_data;\n}\nasync function getMetadataAvatarUri({ gatewayUrls, uri, }) {\n    try {\n        const res = await fetch(uri).then((res) => res.json());\n        const image = await parseAvatarUri({\n            gatewayUrls,\n            uri: getJsonImage(res),\n        });\n        return image;\n    }\n    catch {\n        throw new EnsAvatarUriResolutionError({ uri });\n    }\n}\nasync function parseAvatarUri({ gatewayUrls, uri, }) {\n    const { uri: resolvedURI, isOnChain } = resolveAvatarUri({ uri, gatewayUrls });\n    if (isOnChain)\n        return resolvedURI;\n    // check if resolvedURI is an image, if it is return the url\n    const isImage = await isImageUri(resolvedURI);\n    if (isImage)\n        return resolvedURI;\n    throw new EnsAvatarUriResolutionError({ uri });\n}\nfunction parseNftUri(uri_) {\n    let uri = uri_;\n    // parse valid nft spec (CAIP-22/CAIP-29)\n    // @see: https://github.com/ChainAgnostic/CAIPs/tree/master/CAIPs\n    if (uri.startsWith('did:nft:')) {\n        // convert DID to CAIP\n        uri = uri.replace('did:nft:', '').replace(/_/g, '/');\n    }\n    const [reference, asset_namespace, tokenID] = uri.split('/');\n    const [eip_namespace, chainID] = reference.split(':');\n    const [erc_namespace, contractAddress] = asset_namespace.split(':');\n    if (!eip_namespace || eip_namespace.toLowerCase() !== 'eip155')\n        throw new EnsAvatarInvalidNftUriError({ reason: 'Only EIP-155 supported' });\n    if (!chainID)\n        throw new EnsAvatarInvalidNftUriError({ reason: 'Chain ID not found' });\n    if (!contractAddress)\n        throw new EnsAvatarInvalidNftUriError({\n            reason: 'Contract address not found',\n        });\n    if (!tokenID)\n        throw new EnsAvatarInvalidNftUriError({ reason: 'Token ID not found' });\n    if (!erc_namespace)\n        throw new EnsAvatarInvalidNftUriError({ reason: 'ERC namespace not found' });\n    return {\n        chainID: Number.parseInt(chainID),\n        namespace: erc_namespace.toLowerCase(),\n        contractAddress: contractAddress,\n        tokenID,\n    };\n}\nasync function getNftTokenUri(client, { nft }) {\n    if (nft.namespace === 'erc721') {\n        return readContract(client, {\n            address: nft.contractAddress,\n            abi: [\n                {\n                    name: 'tokenURI',\n                    type: 'function',\n                    stateMutability: 'view',\n                    inputs: [{ name: 'tokenId', type: 'uint256' }],\n                    outputs: [{ name: '', type: 'string' }],\n                },\n            ],\n            functionName: 'tokenURI',\n            args: [BigInt(nft.tokenID)],\n        });\n    }\n    if (nft.namespace === 'erc1155') {\n        return readContract(client, {\n            address: nft.contractAddress,\n            abi: [\n                {\n                    name: 'uri',\n                    type: 'function',\n                    stateMutability: 'view',\n                    inputs: [{ name: '_id', type: 'uint256' }],\n                    outputs: [{ name: '', type: 'string' }],\n                },\n            ],\n            functionName: 'uri',\n            args: [BigInt(nft.tokenID)],\n        });\n    }\n    throw new EnsAvatarUnsupportedNamespaceError({ namespace: nft.namespace });\n}\n\n/*\n * @description Parses an ENS avatar record.\n *\n * @example\n * parseAvatarRecord('eip155:1/erc1155:0xb32979486938aa9694bfc898f35dbed459f44424/10063')\n * 'https://ipfs.io/ipfs/QmSP4nq9fnN9dAiCj42ug9Wa79rqmQerZXZch82VqpiH7U/image.gif'\n *\n * @see https://docs.ens.domains/web/avatars\n *\n */\nasync function parseAvatarRecord(client, { gatewayUrls, record, }) {\n    if (/eip155:/i.test(record))\n        return parseNftAvatarUri(client, { gatewayUrls, record });\n    return parseAvatarUri({ uri: record, gatewayUrls });\n}\nasync function parseNftAvatarUri(client, { gatewayUrls, record, }) {\n    // parse NFT URI into properties\n    const nft = parseNftUri(record);\n    // fetch tokenURI from the NFT contract\n    const nftUri = await getNftTokenUri(client, { nft });\n    // resolve the URI from the fetched tokenURI\n    const { uri: resolvedNftUri, isOnChain, isEncoded, } = resolveAvatarUri({ uri: nftUri, gatewayUrls });\n    // if the resolved URI is on chain, return the data\n    if (isOnChain &&\n        (resolvedNftUri.includes('data:application/json;base64,') ||\n            resolvedNftUri.startsWith('{'))) {\n        const encodedJson = isEncoded\n            ? // if it is encoded, decode it\n                atob(resolvedNftUri.replace('data:application/json;base64,', ''))\n            : // if it isn't encoded assume it is a JSON string, but it could be anything (it will error if it is)\n                resolvedNftUri;\n        const decoded = JSON.parse(encodedJson);\n        return parseAvatarUri({ uri: getJsonImage(decoded), gatewayUrls });\n    }\n    let uriTokenId = nft.tokenID;\n    if (nft.namespace === 'erc1155')\n        uriTokenId = uriTokenId.replace('0x', '').padStart(64, '0');\n    return getMetadataAvatarUri({\n        gatewayUrls,\n        uri: resolvedNftUri.replace(/(?:0x)?{id}/, uriTokenId),\n    });\n}\n\n/**\n * Gets a text record for specified ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsTextParameters}\n * @returns Address for ENS resolver. {@link GetEnsTextReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsText, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const twitterRecord = await getEnsText(client, {\n *   name: normalize('wevm.eth'),\n *   key: 'com.twitter',\n * })\n * // 'wagmi_sh'\n */\nasync function getEnsText(client, { blockNumber, blockTag, name, key, gatewayUrls, strict, universalResolverAddress: universalResolverAddress_, }) {\n    let universalResolverAddress = universalResolverAddress_;\n    if (!universalResolverAddress) {\n        if (!client.chain)\n            throw new Error('client chain not configured. universalResolverAddress is required.');\n        universalResolverAddress = getChainContractAddress({\n            blockNumber,\n            chain: client.chain,\n            contract: 'ensUniversalResolver',\n        });\n    }\n    try {\n        const readContractParameters = {\n            address: universalResolverAddress,\n            abi: universalResolverResolveAbi,\n            functionName: 'resolve',\n            args: [\n                toHex(packetToBytes(name)),\n                encodeFunctionData({\n                    abi: textResolverAbi,\n                    functionName: 'text',\n                    args: [namehash(name), key],\n                }),\n            ],\n            blockNumber,\n            blockTag,\n        };\n        const readContractAction = getAction(client, readContract, 'readContract');\n        const res = gatewayUrls\n            ? await readContractAction({\n                ...readContractParameters,\n                args: [...readContractParameters.args, gatewayUrls],\n            })\n            : await readContractAction(readContractParameters);\n        if (res[0] === '0x')\n            return null;\n        const record = decodeFunctionResult({\n            abi: textResolverAbi,\n            functionName: 'text',\n            data: res[0],\n        });\n        return record === '' ? null : record;\n    }\n    catch (err) {\n        if (strict)\n            throw err;\n        if (isNullUniversalResolverError(err, 'resolve'))\n            return null;\n        throw err;\n    }\n}\n\n/**\n * Gets the avatar of an ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsAvatar\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls [`getEnsText`](https://viem.sh/docs/ens/actions/getEnsText) with `key` set to `'avatar'`.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsAvatarParameters}\n * @returns Avatar URI or `null` if not found. {@link GetEnsAvatarReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsAvatar, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensAvatar = await getEnsAvatar(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // 'https://ipfs.io/ipfs/Qma8mnp6xV3J2cRNf3mTth5C8nV11CAnceVinc3y8jSbio'\n */\nasync function getEnsAvatar(client, { blockNumber, blockTag, assetGatewayUrls, name, gatewayUrls, strict, universalResolverAddress, }) {\n    const record = await getAction(client, getEnsText, 'getEnsText')({\n        blockNumber,\n        blockTag,\n        key: 'avatar',\n        name,\n        universalResolverAddress,\n        gatewayUrls,\n        strict,\n    });\n    if (!record)\n        return null;\n    try {\n        return await parseAvatarRecord(client, {\n            record,\n            gatewayUrls: assetGatewayUrls,\n        });\n    }\n    catch {\n        return null;\n    }\n}\n\n/**\n * Gets primary name for specified address.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsName\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `reverse(bytes)` on ENS Universal Resolver Contract to \"reverse resolve\" the address to the primary ENS name.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsNameParameters}\n * @returns Name or `null` if not found. {@link GetEnsNameReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsName } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensName = await getEnsName(client, {\n *   address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n * })\n * // 'wevm.eth'\n */\nasync function getEnsName(client, { address, blockNumber, blockTag, gatewayUrls, strict, universalResolverAddress: universalResolverAddress_, }) {\n    let universalResolverAddress = universalResolverAddress_;\n    if (!universalResolverAddress) {\n        if (!client.chain)\n            throw new Error('client chain not configured. universalResolverAddress is required.');\n        universalResolverAddress = getChainContractAddress({\n            blockNumber,\n            chain: client.chain,\n            contract: 'ensUniversalResolver',\n        });\n    }\n    const reverseNode = `${address.toLowerCase().substring(2)}.addr.reverse`;\n    try {\n        const readContractParameters = {\n            address: universalResolverAddress,\n            abi: universalResolverReverseAbi,\n            functionName: 'reverse',\n            args: [toHex(packetToBytes(reverseNode))],\n            blockNumber,\n            blockTag,\n        };\n        const readContractAction = getAction(client, readContract, 'readContract');\n        const [name, resolvedAddress] = gatewayUrls\n            ? await readContractAction({\n                ...readContractParameters,\n                args: [...readContractParameters.args, gatewayUrls],\n            })\n            : await readContractAction(readContractParameters);\n        if (address.toLowerCase() !== resolvedAddress.toLowerCase())\n            return null;\n        return name;\n    }\n    catch (err) {\n        if (strict)\n            throw err;\n        if (isNullUniversalResolverError(err, 'reverse'))\n            return null;\n        throw err;\n    }\n}\n\n/**\n * Gets resolver for ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `findResolver(bytes)` on ENS Universal Resolver Contract to retrieve the resolver of an ENS name.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsResolverParameters}\n * @returns Address for ENS resolver. {@link GetEnsResolverReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsResolver, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const resolverAddress = await getEnsResolver(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // '0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41'\n */\nasync function getEnsResolver(client, { blockNumber, blockTag, name, universalResolverAddress: universalResolverAddress_, }) {\n    let universalResolverAddress = universalResolverAddress_;\n    if (!universalResolverAddress) {\n        if (!client.chain)\n            throw new Error('client chain not configured. universalResolverAddress is required.');\n        universalResolverAddress = getChainContractAddress({\n            blockNumber,\n            chain: client.chain,\n            contract: 'ensUniversalResolver',\n        });\n    }\n    const [resolverAddress] = await getAction(client, readContract, 'readContract')({\n        address: universalResolverAddress,\n        abi: [\n            {\n                inputs: [{ type: 'bytes' }],\n                name: 'findResolver',\n                outputs: [{ type: 'address' }, { type: 'bytes32' }],\n                stateMutability: 'view',\n                type: 'function',\n            },\n        ],\n        functionName: 'findResolver',\n        args: [toHex(packetToBytes(name))],\n        blockNumber,\n        blockTag,\n    });\n    return resolverAddress;\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    normalize: normalize,\n    getEnsAddress: getEnsAddress,\n    getEnsAvatar: getEnsAvatar,\n    getEnsName: getEnsName,\n    getEnsResolver: getEnsResolver,\n    getEnsText: getEnsText,\n    labelhash: labelhash,\n    namehash: namehash,\n    parseAvatarRecord: parseAvatarRecord,\n    packetToBytes: packetToBytes\n});\n\nexport { HttpRequestError as H, call as c, decodeErrorResult as d, encodeAbiParameters as e, index as i, stringify as s };\n//# sourceMappingURL=index-021f6a62.js.map\n"],"names":["formatEther","wei","unit","formatUnits","etherUnits","COMPRESSED$1","FENCED","NSM_MAX","decode_arithmetic","bytes","pos","u16","symbol_count","total","acc","i","skip","pos_payload","read_width","read_buffer","read_bit","N","FULL","HALF","QRTR","MASK","register","symbols","low","range","value","start","end","mid","a","offset","x","read_payload","v","read_compressed_payload","s","unsafe_atob","lookup","c","ret","width","carry","signed","read_deltas","n","next","read_sorted","prev","read_sorted_arrays","read_array_while","read_mapped","w","read_linear_table","read_replacement_table","read_transposed","m","j","dx","dy","vN","ys","_","j_dy","y","read_trie","sorted","expand","decode","Q","S","B","cps","saved","br","cp","hex_cp","quote_cp","explode_cp","len","str_from_cps","buf","compare_arrays","b","COMPRESSED","S0","L0","V0","T0","L_COUNT","V_COUNT","T_COUNT","N_COUNT","S_COUNT","S1","L1","V1","T1","unpack_cc","packed","unpack_cp","SHIFTED_RANK","EXCLUSIONS","DECOMP","RECOMP","init$1","r","bucket","is_hangul","compose_pair","recomp","decomposed","check_order","add","cc","s_index","l_index","v_index","t_index","mapped","prev_cc","tmp","composed_from_decomposed","stack","prev_cp","composed","nfd","nfc","HYPHEN","STOP_CH","FE0F","UNIQUE_PH","Array_from","group_has_cp","g","Emoji","MAPPED","IGNORED","CM","NSM","ESCAPE","GROUPS","WHOLE_VALID","WHOLE_MAP","VALID","EMOJI_LIST","EMOJI_ROOT","init","read_sorted_array","read_sorted_set","chunks","unrestricted","read_chunked","R","P","M","wholes","d","V","recs","gs","rec","G","union","complement","multi","add_to_union","node","child","quoted_cp","should_escape","bidi_qq","safe_str_from_cps","check_label_extension","check_leading_underscore","check_fenced","error_placement","last","match","quoter","is_combining_mark","ens_normalize","name","flatten","split","filter_fe0f","nf","ef","label","input","info","tokens","tokens_from_str","token_count","type","norm","chars","unique","determine_group","check_group","check_whole","err","group","maker","shared","whole","set","groups","error_group_member","error_disallowed","error","output","msg","quoted","gg","where","e","k","emoji","consume_emoji_reversed","eaten","normalize","multicall3Abi","universalResolverErrors","universalResolverResolveAbi","universalResolverReverseAbi","textResolverAbi","addressResolverAbi","formatAbiItem$1","abiItem","includeName","InvalidDefinitionTypeError","formatAbiParams","params","param","formatAbiParam","AbiDecodingDataSizeTooSmallError","BaseError","data","size","AbiDecodingZeroDataError","AbiEncodingArrayLengthMismatchError","expectedLength","givenLength","AbiEncodingBytesSizeMismatchError","expectedSize","AbiEncodingLengthMismatchError","AbiErrorSignatureNotFoundError","signature","docsPath","AbiFunctionNotFoundError","functionName","AbiFunctionOutputsNotFoundError","AbiItemAmbiguityError","InvalidAbiEncodingTypeError","InvalidAbiDecodingTypeError","InvalidArrayError","bytesToBigInt","opts","assertSize","hex","bytesToHex","hexToBigInt","bytesToBool","bytes_","trim","InvalidBytesBooleanError","bytesToNumber","hexToNumber","bytesToString","encodeAbiParameters","values","preparedParams","prepareParams","encodeParams","prepareParam","arrayComponents","getArrayComponents","length","encodeArray","encodeTuple","encodeAddress","encodeBool","encodeNumber","encodeBytes","encodeString","staticSize","dynamic","encoded","staticParams","dynamicParams","dynamicSize","numberToHex","concat","isAddress","InvalidAddressError","padHex","dynamicChild","preparedParam","paramSize","bytesSize","value_","boolToHex","hexValue","stringToHex","partsLength","parts","slice","param_","index","matches","decodeAbiParameters","hexToBytes","cursor","createCursor","consumed","consumed_","decodeParameter","staticPosition","decodeArray","decodeTuple","decodeAddress","decodeBool","decodeBytes","decodeNumber","decodeString","sizeOfLength","sizeOfOffset","checksumAddress","sliceBytes","startOfData","hasDynamicChild","hasUnnamedChild","component","_a","hash","keccak256","toBytes","hashSignature","sig","execTyped","regex","string","tupleRegex","formatAbiParameter","abiParameter","result","formatAbiParameters","abiParameters","formatAbiItem","normalizeSignature","active","current","level","valid","char","toSignature","def","def_","toSignatureHash","fn","toEventSelector","toFunctionSelector","getAbiItem","parameters","abi","args","isSelector","isHex","abiItems","matchedAbiItem","arg","isArgOfType","ambiguousTypes","getAmbiguousTypes","argType","abiParameterType","sourceParameters","targetParameters","parameterIndex","sourceParameter","targetParameter","types","docsPath$1","decodeFunctionResult","item","prepareEncodeFunctionData","encodeFunctionData","concatHex","getChainContractAddress","blockNumber","chain","contract","ChainDoesNotSupportContract","panicReasons","solidityError","solidityPanic","parseAccount","account","decodeErrorResult","stringify","replacer","space","key","formatAbiItemWithArgs","includeFunctionName","AccountStateConflictError","address","StateAssignmentConflictError","prettyStateMapping","stateMapping","pretty","slot","prettyStateOverride","stateOverride","state","val","CallExecutionError","cause","account_","gas","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","prettyArgs","prettyPrint","formatGwei","ContractFunctionExecutionError","contractAddress","sender","formattedArgs","functionWithParams","getContractAddress","ContractFunctionRevertedError","message","decodedData","metaMessages","reason","errorName","errorArgs","firstArg","errorWithParams","ContractFunctionZeroDataError","RawContractError","isNullUniversalResolverError","callType","_b","_c","_d","_e","_f","encodedLabelToLabelhash","namehash","labels","hashFromEncodedLabel","hashed","stringToBytes","encodeLabelhash","labelhash","packetToBytes","packet","list","getAction","client","action","HttpRequestError","body","details","headers","status","url","getUrl","RpcRequestError","unknownErrorCode","RpcError","code","shortMessage","InternalRpcError","EXECUTION_REVERTED_ERROR_CODE","getContractError","aggregate3Signature","getNodeError","executionRevertedError","ExecutionRevertedError","FeeCapTooHighError","FeeCapTooLowError","NonceTooHighError","NonceTooLowError","NonceMaxValueError","InsufficientFundsError","IntrinsicGasTooHighError","IntrinsicGasTooLowError","TransactionTypeNotSupportedError","TipAboveFeeCapError","UnknownNodeError","getCallError","extract","format","extract_","formatted","keys","schedulerCache","createBatchScheduler","id","shouldSplitBatch","wait","sort","exec","scheduler","getScheduler","flush","pendingPromise","getBatchedArgs","setScheduler","promise","resolve","reject","serializeStateMapping","InvalidBytesLengthError","serializeAccountStateOverride","balance","stateDiff","rpcAccountStateOverride","serializeStateOverride","rpcStateOverride","accountState","assertRequest","FeeConflictError","call","batch","blockTag","accessList","blobs","maxFeePerBlobGas","rest","block","chainFormat","request","formatTransactionRequest","shouldPerformMulticall","scheduleMulticall","ClientChainNotConfiguredError","response","getRevertErrorData","offchainLookup","offchainLookupSignature","request_","batchSize","multicallAddress_","multicallAddress","schedule","requests","calls","calldata","returnData","success","readContract","getEnsAddress","coinType","gatewayUrls","strict","universalResolverAddress_","universalResolverAddress","functionData","readContractParameters","toHex","readContractAction","res","EnsAvatarInvalidMetadataError","EnsAvatarInvalidNftUriError","EnsAvatarUriResolutionError","uri","EnsAvatarUnsupportedNamespaceError","namespace","networkRegex","ipfsHashRegex","base64Regex","dataURIRegex","isImageUri","contentType","img","getGateway","custom","defaultGateway","resolveAvatarUri","isEncoded","ipfsGateway","arweaveGateway","networkRegexMatch","protocol","subpath","target","subtarget","isIPNS","isIPFS","replacedUri","parsedUri","getJsonImage","getMetadataAvatarUri","parseAvatarUri","resolvedURI","isOnChain","parseNftUri","uri_","reference","asset_namespace","tokenID","eip_namespace","chainID","erc_namespace","getNftTokenUri","nft","parseAvatarRecord","record","parseNftAvatarUri","nftUri","resolvedNftUri","encodedJson","decoded","uriTokenId","getEnsText","getEnsAvatar","assetGatewayUrls","getEnsName","reverseNode","resolvedAddress","getEnsResolver","resolverAddress"],"mappings":"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","x_google_ignoreList":[0]}